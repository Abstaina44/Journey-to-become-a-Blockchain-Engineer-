interface iNetworkConfigs {
    [chain: string]: {
        blockExplorerUrl?: string;
        currencyName?: string;
        chainId?: number;
        chainName?: string;
        currencySymbol: string;
        wrapped?: string;
        rpcUrl?: string;
    };
}
export declare const networkConfigs: iNetworkConfigs;
export declare const getNativeByChain: (chain: string) => string;
export declare const getChainById: (chain: string) => number | null;
export declare const getExplorer: (chain: string) => string | undefined;
export declare const getWrappedNative: (chain: string) => string | null;
declare type EthChain = 'eth' | '0x1';
declare type RopstenChain = 'ropsten' | '0x3';
declare type RinkebyChain = 'rinkeby' | '0x4';
declare type GoerliChain = 'goerli' | '0x5';
declare type KovanChain = 'kovan' | '0x2a';
declare type BscChain = 'bsc' | '0x38';
declare type BscTestChain = 'bsc testnet' | '0x61';
declare type PolygonChain = 'polygon' | '0x89';
declare type MumbaiChain = 'mumbai' | '0x13881';
declare type FantomChain = 'fantom' | '0xfa';
declare type AvalancheChain = 'avalanche' | '0xa86a';
declare type AvalancheTestChain = 'avalanche testnet' | '0xa869';
export declare type Chain = EthChain | RopstenChain | RinkebyChain | GoerliChain | KovanChain | BscChain | BscTestChain | PolygonChain | MumbaiChain | FantomChain | AvalancheChain | AvalancheTestChain;
export declare const chainToHex: {
    eth: string;
    ropsten: string;
    rinkeby: string;
    goerli: string;
    kovan: string;
    bsc: string;
    'bsc testnet': string;
    polygon: string;
    mumbai: string;
    fantom: string;
    avalanche: string;
    'avalanche testnet': string;
    '0x1': string;
    '0x3': string;
    '0x4': string;
    '0x5': string;
    '0x2a': string;
    '0x38': string;
    '0x61': string;
    '0x89': string;
    '0x13881': string;
    '0xfa': string;
    '0xa86a': string;
    '0xa869': string;
};
export declare const getChainHex: (chain: Chain) => string;
export {};
//# sourceMappingURL=networks.d.ts.map