/**
 * The stream status:
 * [active] The Stream is healthy and processing blocks
 * [paused] The Stream is paused and is not processing blocks
 * [error] The Stream has encountered an error and is not processing blocks
 * @example {}
 */
export enum StreamsStatus {
  active = 'active',
  paused = 'paused',
  error = 'error',
}

/**
 * The stream type:
 * [wallet] listen to all native transactions of the address and all logs where the address is involved in at least one of the topics
 * [contract] listens to all native transactions of the address and all logs produced by the contract address
 * @example {}
 */
export enum StreamsType {
  wallet = 'wallet',
  contract = 'contract',
}

/**
 * Stringified UUIDv4.
 * See [RFC 4112](https://tools.ietf.org/html/rfc4122)
 * @pattern [0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}
 * @format uuid
 */
export type UUID = string;

export interface StreamsModelCreate {
  /**
   * Webhook URL where moralis will send the POST request.
   */
  webhookUrl: string;
  /**
   * A description for this stream
   */
  description: string;
  /**
   * A user-provided tag that will be send along the webhook, the user can use this tag to identify the specific stream if multiple streams are present
   */
  tag: string;
  /**
   * The token address of the contract, required if the type : log
   */
  tokenAddress?: string | null;
  /**
   * The topic0 of the event in hex, required if the type : log
   */
  topic0?: string | null;
  /**
   * Include or not native transactions defaults to false (only applied when type:contract)
   */
  includeNativeTxs?: boolean;
  abi?: StreamsAbi | null;
  filter?: StreamsFilter | null;
  /**
   * The wallet address of the user, required if the type : tx
   */
  address?: string | null;
  /**
   * The ids of the chains for this stream in hex Ex: ["0x1","0x38"]
   */
  chainIds: string[];
  /**
   * The type of stream to create log or tx
   */
  type: StreamsType;
}

export interface StreamsModel extends StreamsModelCreate {
  /**
   * The unique uuid of the stream
   */
  id?: UUID;
  /**
   * The status of the stream.
   */
  status?: StreamsStatus;
  /**
   * Description of current status of stream.
   */
  statusMessage?: string;
}

export interface StreamsResponse {
  /**
   * Array of project Streams
   */
  result: StreamsModel[];
  /**
   * Cursor for fetching next page
   */
  cursor?: string;
  /**
   * Total count of streams on the project
   */
  total: number;
}

/**
 * The filter object, optional and only used if the type : log
 * https://v1docs.moralis.io/moralis-dapp/automatic-transaction-sync/smart-contract-events#event-filters
 * @example {}
 */
export interface StreamsFilter {
  [key: string]: any;
}

/**
 * The abi to parse the log object of the contract
 * @example {}
 */
export interface StreamsAbi {
  [key: string]: any;
}

export interface StreamsStatusUpdate {
  /**
   * The status of the stream.
   */
  status: StreamsStatus;
}
