"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateStream = exports.StreamNetwork = void 0;
var MoralisStreams_1 = require("../MoralisStreams");
var api_utils_1 = require("@moralisweb3/api-utils");
var core_1 = require("@moralisweb3/core");
var resolvers_1 = require("../resolvers");
var StreamNetwork;
(function (StreamNetwork) {
    StreamNetwork["EVM"] = "evm";
})(StreamNetwork = exports.StreamNetwork || (exports.StreamNetwork = {}));
var makeUpdateStreamEvm = function (core, _a) {
    var network = _a.network, options = __rest(_a, ["network"]);
    return api_utils_1.EndpointResolver.create(core, MoralisStreams_1.BASE_URL, resolvers_1.updateStreamEvm).fetch(options);
};
var updateStream = function (core) { return function (options) {
    switch (options.network) {
        case StreamNetwork.EVM:
            return makeUpdateStreamEvm(core, options);
        default:
            throw new core_1.MoralisStreamError({
                code: core_1.StreamErrorCode.INCORRECT_NETWORK,
                message: "Incorrect network provided. Got \"".concat(options.network, "\", Valid values are: ").concat(Object.values(StreamNetwork)
                    .map(function (value) { return "\"".concat(value, "\""); })
                    .join(', ')),
            });
    }
}; };
exports.updateStream = updateStream;
//# sourceMappingURL=update.js.map