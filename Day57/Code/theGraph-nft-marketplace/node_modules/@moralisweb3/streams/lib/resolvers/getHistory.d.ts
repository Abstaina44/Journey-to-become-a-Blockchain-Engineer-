export declare const getHistory: import("@moralisweb3/api-utils").EndpointFactory<{
    limit: number;
    cursor?: string | undefined;
}, {
    limit: number;
    cursor?: string | undefined;
}, {
    result: {
        id: string;
        date: string;
        payload: {
            erc20Transfers: {
                transactionHash: string;
                tokenAddress: string;
                logIndex: number;
                tag: string;
                from: string;
                to: string;
                amount: string;
                valueWithDecimals: string;
            }[];
            erc20Approvals: {
                transactionHash: string;
                tokenAddress: string;
                logIndex: number;
                tag: string;
                owner: string;
                spender: string;
                value: string;
                valueWithDecimals: string;
            }[];
            nftTransfers: {
                transactionHash: string;
                tokenAddress: string;
                logIndex: number;
                tag: string;
                from: string;
                to: string;
                tokenId: string;
            }[];
            nftApprovals: {
                transactionHash: string;
                tokenAddress: string;
                logIndex: number;
                tag: string;
                account: string;
                operator: string;
                approved: boolean;
            }[];
            block: {
                number: string;
                hash: string;
                timestamp: string;
            };
            chainId: string;
            logs: {
                logIndex: string;
                transactionHash: string;
                address: string;
                data: string | null;
                topic0: string | null;
                topic1: string | null;
                topic2: string | null;
                topic3: string | null;
            }[];
            txs: {
                hash: string;
                gas: string | null;
                gasPrice: string | null;
                nonce: string | null;
                input: string | null;
                transactionIndex: string;
                fromAddress: string;
                toAddress: string | null;
                value: string | null;
                type: string | null;
                v: string | null;
                r: string | null;
                s: string | null;
                receiptCumulativeGasUsed: string | null;
                receiptGasUsed: string | null;
                receiptContractAddress: string | null;
                receiptRoot: string | null;
                receiptStatus: string | null;
            }[];
            txsInternal: {
                from: string | null;
                to: string | null;
                value: string | null;
                transactionHash: string;
                gas: string | null;
            }[];
            abis: {
                [key: string]: {
                    anonymous?: boolean | undefined;
                    constant?: boolean | undefined;
                    inputs?: {
                        name: string;
                        type: string;
                        indexed?: boolean | undefined;
                        components?: any[] | undefined;
                        internalType?: string | undefined;
                    }[] | undefined;
                    name?: string | undefined;
                    outputs?: {
                        name: string;
                        type: string;
                        components?: any[] | undefined;
                        internalType?: string | undefined;
                    }[] | undefined;
                    payable?: boolean | undefined;
                    stateMutability?: "pure" | "view" | "nonpayable" | "payable" | undefined;
                    type: "function" | "constructor" | "event" | "fallback";
                    gas?: number | undefined;
                };
            };
            retries: number;
            confirmed: boolean;
        };
        errorMessage: string;
        webhookUrl: string;
    }[];
    cursor?: string | undefined;
}, {
    result: {
        id: string;
        date: string;
        payload: {
            erc20Transfers: {
                transactionHash: string;
                tokenAddress: string;
                logIndex: number;
                tag: string;
                from: string;
                to: string;
                amount: string;
                valueWithDecimals: string;
            }[];
            erc20Approvals: {
                transactionHash: string;
                tokenAddress: string;
                logIndex: number;
                tag: string;
                owner: string;
                spender: string;
                value: string;
                valueWithDecimals: string;
            }[];
            nftTransfers: {
                transactionHash: string;
                tokenAddress: string;
                logIndex: number;
                tag: string;
                from: string;
                to: string;
                tokenId: string;
            }[];
            nftApprovals: {
                transactionHash: string;
                tokenAddress: string;
                logIndex: number;
                tag: string;
                account: string;
                operator: string;
                approved: boolean;
            }[];
            block: {
                number: string;
                hash: string;
                timestamp: string;
            };
            chainId: string;
            logs: {
                logIndex: string;
                transactionHash: string;
                address: string;
                data: string | null;
                topic0: string | null;
                topic1: string | null;
                topic2: string | null;
                topic3: string | null;
            }[];
            txs: {
                hash: string;
                gas: string | null;
                gasPrice: string | null;
                nonce: string | null;
                input: string | null;
                transactionIndex: string;
                fromAddress: string;
                toAddress: string | null;
                value: string | null;
                type: string | null;
                v: string | null;
                r: string | null;
                s: string | null;
                receiptCumulativeGasUsed: string | null;
                receiptGasUsed: string | null;
                receiptContractAddress: string | null;
                receiptRoot: string | null;
                receiptStatus: string | null;
            }[];
            txsInternal: {
                from: string | null;
                to: string | null;
                value: string | null;
                transactionHash: string;
                gas: string | null;
            }[];
            abis: {
                [key: string]: {
                    anonymous?: boolean | undefined;
                    constant?: boolean | undefined;
                    inputs?: {
                        name: string;
                        type: string;
                        indexed?: boolean | undefined;
                        components?: any[] | undefined;
                        internalType?: string | undefined;
                    }[] | undefined;
                    name?: string | undefined;
                    outputs?: {
                        name: string;
                        type: string;
                        components?: any[] | undefined;
                        internalType?: string | undefined;
                    }[] | undefined;
                    payable?: boolean | undefined;
                    stateMutability?: "pure" | "view" | "nonpayable" | "payable" | undefined;
                    type: "function" | "constructor" | "event" | "fallback";
                    gas?: number | undefined;
                };
            };
            retries: number;
            confirmed: boolean;
        };
        errorMessage: string;
        webhookUrl: string;
    }[];
    cursor?: string | undefined;
}, {
    result: {
        id: string;
        date: string;
        payload: {
            erc20Transfers: {
                transactionHash: string;
                tokenAddress: string;
                logIndex: number;
                tag: string;
                from: string;
                to: string;
                amount: string;
                valueWithDecimals: string;
            }[];
            erc20Approvals: {
                transactionHash: string;
                tokenAddress: string;
                logIndex: number;
                tag: string;
                owner: string;
                spender: string;
                value: string;
                valueWithDecimals: string;
            }[];
            nftTransfers: {
                transactionHash: string;
                tokenAddress: string;
                logIndex: number;
                tag: string;
                from: string;
                to: string;
                tokenId: string;
            }[];
            nftApprovals: {
                transactionHash: string;
                tokenAddress: string;
                logIndex: number;
                tag: string;
                account: string;
                operator: string;
                approved: boolean;
            }[];
            block: {
                number: string;
                hash: string;
                timestamp: string;
            };
            chainId: string;
            logs: {
                logIndex: string;
                transactionHash: string;
                address: string;
                data: string | null;
                topic0: string | null;
                topic1: string | null;
                topic2: string | null;
                topic3: string | null;
            }[];
            txs: {
                hash: string;
                gas: string | null;
                gasPrice: string | null;
                nonce: string | null;
                input: string | null;
                transactionIndex: string;
                fromAddress: string;
                toAddress: string | null;
                value: string | null;
                type: string | null;
                v: string | null;
                r: string | null;
                s: string | null;
                receiptCumulativeGasUsed: string | null;
                receiptGasUsed: string | null;
                receiptContractAddress: string | null;
                receiptRoot: string | null;
                receiptStatus: string | null;
            }[];
            txsInternal: {
                from: string | null;
                to: string | null;
                value: string | null;
                transactionHash: string;
                gas: string | null;
            }[];
            abis: {
                [key: string]: {
                    anonymous?: boolean | undefined;
                    constant?: boolean | undefined;
                    inputs?: {
                        name: string;
                        type: string;
                        indexed?: boolean | undefined;
                        components?: any[] | undefined;
                        internalType?: string | undefined;
                    }[] | undefined;
                    name?: string | undefined;
                    outputs?: {
                        name: string;
                        type: string;
                        components?: any[] | undefined;
                        internalType?: string | undefined;
                    }[] | undefined;
                    payable?: boolean | undefined;
                    stateMutability?: "pure" | "view" | "nonpayable" | "payable" | undefined;
                    type: "function" | "constructor" | "event" | "fallback";
                    gas?: number | undefined;
                };
            };
            retries: number;
            confirmed: boolean;
        };
        errorMessage: string;
        webhookUrl: string;
    }[];
    cursor?: string | undefined;
}>;
//# sourceMappingURL=getHistory.d.ts.map