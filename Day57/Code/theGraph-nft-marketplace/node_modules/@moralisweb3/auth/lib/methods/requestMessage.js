"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeRequestMessage = exports.AuthNetwork = void 0;
var sol_utils_1 = require("@moralisweb3/sol-utils");
var api_utils_1 = require("@moralisweb3/api-utils");
var core_1 = require("@moralisweb3/core");
var evm_utils_1 = require("@moralisweb3/evm-utils");
var MoralisAuth_1 = require("../MoralisAuth");
var resolvers_1 = require("../resolvers");
var AuthNetwork;
(function (AuthNetwork) {
    AuthNetwork["EVM"] = "evm";
    AuthNetwork["SOLANA"] = "solana";
})(AuthNetwork = exports.AuthNetwork || (exports.AuthNetwork = {}));
var makeEvmRequestMessage = function (core, _a) {
    var chain = _a.chain, address = _a.address, network = _a.network, options = __rest(_a, ["chain", "address", "network"]);
    return api_utils_1.EndpointResolver.create(core, MoralisAuth_1.BASE_URL, resolvers_1.initializeChallengeEvm).fetch(__assign({ chainId: evm_utils_1.EvmChain.create(chain).apiId, address: evm_utils_1.EvmAddress.create(address).checksum }, options));
};
var makeSolRequestMessage = function (core, _a) {
    var address = _a.address, solNetwork = _a.solNetwork, network = _a.network, options = __rest(_a, ["address", "solNetwork", "network"]);
    return api_utils_1.EndpointResolver.create(core, MoralisAuth_1.BASE_URL, resolvers_1.initializeChallengeSol).fetch(__assign({ network: sol_utils_1.SolNetwork.create(solNetwork).network, address: sol_utils_1.SolAddress.create(address).toString() }, options));
};
var makeRequestMessage = function (core) { return function (options) {
    switch (options.network) {
        case AuthNetwork.EVM:
            return makeEvmRequestMessage(core, options);
        case AuthNetwork.SOLANA:
            return makeSolRequestMessage(core, options);
        default:
            throw new core_1.MoralisAuthError({
                code: core_1.AuthErrorCode.INCORRECT_NETWORK,
                message: "Incorrect network provided. Got \"".concat(options.network, "\", Valid values are: ").concat(Object.values(AuthNetwork)
                    .map(function (value) { return "\"".concat(value, "\""); })
                    .join(', ')),
            });
    }
}; };
exports.makeRequestMessage = makeRequestMessage;
//# sourceMappingURL=requestMessage.js.map