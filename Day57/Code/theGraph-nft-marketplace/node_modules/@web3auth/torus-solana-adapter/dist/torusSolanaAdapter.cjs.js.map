{"version":3,"file":"torusSolanaAdapter.cjs.js","mappings":"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","sources":["webpack://@web3auth/torus-solana-adapter/webpack/bootstrap","webpack://@web3auth/torus-solana-adapter/webpack/runtime/compat get default export","webpack://@web3auth/torus-solana-adapter/webpack/runtime/define property getters","webpack://@web3auth/torus-solana-adapter/webpack/runtime/hasOwnProperty shorthand","webpack://@web3auth/torus-solana-adapter/webpack/runtime/make namespace object","webpack://@web3auth/torus-solana-adapter/external commonjs2 \"@babel/runtime/helpers/defineProperty\"","webpack://@web3auth/torus-solana-adapter/external commonjs2 \"@toruslabs/solana-embed\"","webpack://@web3auth/torus-solana-adapter/external commonjs2 \"@web3auth/base\"","webpack://@web3auth/torus-solana-adapter/external commonjs2 \"@web3auth/base-solana-adapter\"","webpack://@web3auth/torus-solana-adapter/external commonjs2 \"@web3auth/solana-provider\"","webpack://@web3auth/torus-solana-adapter/./src/solanaWalletAdapter.ts","webpack://@web3auth/torus-solana-adapter/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/solana-embed\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/base\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/base-solana-adapter\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/solana-provider\");","import Torus, { NetworkInterface, TorusCtorArgs, TorusLoginParams, TorusParams } from \"@toruslabs/solana-embed\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  getChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { BaseSolanaAdapter } from \"@web3auth/base-solana-adapter\";\nimport { ITorusWalletProvider, TorusInjectedProvider } from \"@web3auth/solana-provider\";\n\nexport interface SolanaWalletOptions {\n  adapterSettings?: TorusCtorArgs;\n  loginSettings?: TorusLoginParams;\n  initParams?: Omit<TorusParams, \"network\">;\n  chainConfig?: CustomChainConfig;\n  sessionTime?: number;\n}\n\nexport class SolanaWalletAdapter extends BaseSolanaAdapter<void> {\n  readonly name: string = WALLET_ADAPTERS.TORUS_SOLANA;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.SOLANA;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.SOLANA;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public torusInstance: Torus | null = null;\n\n  private torusWalletOptions?: TorusCtorArgs;\n\n  private initParams?: TorusParams;\n\n  private loginSettings?: TorusLoginParams = {};\n\n  private solanaProvider: TorusInjectedProvider | null = null;\n\n  private rehydrated = false;\n\n  constructor(params: SolanaWalletOptions = {}) {\n    super();\n    this.torusWalletOptions = params.adapterSettings || {};\n    this.initParams = params.initParams || {};\n    this.loginSettings = params.loginSettings || {};\n    this.chainConfig = params.chainConfig || null;\n    this.sessionTime = params.sessionTime || 86400;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.solanaProvider) {\n      return this.solanaProvider?.provider || null;\n    }\n    return null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    // set chainConfig for mainnet by default if not set\n    let network: NetworkInterface;\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, \"0x1\");\n      const { blockExplorer, displayName, ticker, tickerName, rpcTarget, chainId } = this.chainConfig as CustomChainConfig;\n      network = { chainId, rpcTarget, blockExplorerUrl: blockExplorer, displayName, ticker, tickerName, logo: \"\" };\n    } else {\n      const { chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName } = this.chainConfig as CustomChainConfig;\n      network = { chainId, rpcTarget, blockExplorerUrl: blockExplorer, displayName, tickerName, ticker, logo: \"\" };\n    }\n    this.torusInstance = new Torus(this.torusWalletOptions);\n    log.debug(\"initializing torus solana adapter init\");\n    await this.torusInstance.init({ showTorusButton: false, ...this.initParams, network });\n\n    this.solanaProvider = new TorusInjectedProvider({\n      config: {\n        chainConfig: this.chainConfig as CustomChainConfig,\n      },\n    });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.TORUS_SOLANA);\n\n    try {\n      log.debug(\"initializing torus solana adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached torus solana provider\", error);\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    if (!this.solanaProvider) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.TORUS_SOLANA });\n    try {\n      await this.torusInstance.login(this.loginSettings);\n      try {\n        const torusInpageProvider = this.torusInstance.provider as unknown as ITorusWalletProvider;\n        torusInpageProvider.sendTransaction = this.torusInstance.sendTransaction.bind(this.torusInstance);\n        torusInpageProvider.signAllTransactions = this.torusInstance.signAllTransactions.bind(this.torusInstance);\n        torusInpageProvider.signMessage = this.torusInstance.signMessage.bind(this.torusInstance);\n        torusInpageProvider.signTransaction = this.torusInstance.signTransaction.bind(this.torusInstance);\n        await this.solanaProvider.setupProvider(torusInpageProvider);\n      } catch (error: unknown) {\n        // some issue in solana wallet, always connecting to mainnet on init.\n        // fallback to change network if not connected to correct one on login.\n        if (error instanceof Web3AuthError && error.code === 5010) {\n          const { chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName } = this.chainConfig as CustomChainConfig;\n          const network = { chainId, rpcTarget, blockExplorerUrl: blockExplorer, displayName, tickerName, ticker, logo: \"\" };\n          await this.torusInstance.setProvider(network);\n        } else {\n          throw error;\n        }\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.torusInstance.showTorusButton();\n      this.emit(ADAPTER_STATUS.CONNECTED, { adapter: WALLET_ADAPTERS.TORUS_SOLANA, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with torus solana wallet\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    await super.disconnect();\n    await this.torusInstance.logout();\n    if (options.cleanup) {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.torusInstance = null;\n      this.solanaProvider = null;\n    } else {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    const userInfo = await this.torusInstance.getUserInfo();\n    return userInfo;\n  }\n\n  setAdapterSettings(options: { sessionTime?: number }): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    if (options?.sessionTime) {\n      this.sessionTime = options.sessionTime;\n    }\n  }\n}\n","export * from \"./solanaWalletAdapter\";\n"],"names":["Torus","ADAPTER_CATEGORY","ADAPTER_EVENTS","ADAPTER_NAMESPACES","ADAPTER_STATUS","CHAIN_NAMESPACES","getChainConfig","log","WALLET_ADAPTERS","WalletInitializationError","WalletLoginError","Web3AuthError","BaseSolanaAdapter","TorusInjectedProvider","SolanaWalletAdapter","constructor","params","TORUS_SOLANA","SOLANA","EXTERNAL","NOT_READY","torusWalletOptions","adapterSettings","initParams","loginSettings","chainConfig","sessionTime","provider","status","CONNECTED","solanaProvider","_","Error","init","options","checkInitializationRequirements","network","blockExplorer","displayName","ticker","tickerName","rpcTarget","chainId","blockExplorerUrl","logo","torusInstance","debug","showTorusButton","config","READY","emit","autoConnect","rehydrated","connect","error","ERRORED","checkConnectionRequirements","notReady","CONNECTING","adapter","login","torusInpageProvider","sendTransaction","bind","signAllTransactions","signMessage","signTransaction","setupProvider","code","setProvider","reconnected","connectionError","disconnect","cleanup","logout","DISCONNECTED","getUserInfo","notConnectedError","userInfo","setAdapterSettings"],"sourceRoot":""}