{"version":3,"file":"metamaskAdapter.cjs.js","mappings":"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","sources":["webpack://@web3auth/metamask-adapter/webpack/bootstrap","webpack://@web3auth/metamask-adapter/webpack/runtime/compat get default export","webpack://@web3auth/metamask-adapter/webpack/runtime/define property getters","webpack://@web3auth/metamask-adapter/webpack/runtime/hasOwnProperty shorthand","webpack://@web3auth/metamask-adapter/webpack/runtime/make namespace object","webpack://@web3auth/metamask-adapter/external commonjs2 \"@babel/runtime/helpers/defineProperty\"","webpack://@web3auth/metamask-adapter/external commonjs2 \"@metamask/detect-provider\"","webpack://@web3auth/metamask-adapter/external commonjs2 \"@web3auth/base\"","webpack://@web3auth/metamask-adapter/external commonjs2 \"@web3auth/base-evm-adapter\"","webpack://@web3auth/metamask-adapter/./src/metamaskAdapter.ts","webpack://@web3auth/metamask-adapter/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@metamask/detect-provider\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/base\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/base-evm-adapter\");","import detectEthereumProvider from \"@metamask/detect-provider\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  getChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n} from \"@web3auth/base\";\nimport { BaseEvmAdapter } from \"@web3auth/base-evm-adapter\";\n\ninterface EthereumProvider extends SafeEventEmitterProvider {\n  isMetaMask?: boolean;\n  isConnected: () => boolean;\n  chainId: string;\n}\nexport interface MetamaskAdapterOptions {\n  chainConfig?: CustomChainConfig;\n  sessionTime?: number;\n}\n\nclass MetamaskAdapter extends BaseEvmAdapter<void> {\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.EIP155;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  readonly name: string = WALLET_ADAPTERS.METAMASK;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  private rehydrated = false;\n\n  private metamaskProvider: EthereumProvider | null = null;\n\n  constructor(adapterOptions: MetamaskAdapterOptions = {}) {\n    super();\n    this.chainConfig = adapterOptions.chainConfig || null;\n    this.sessionTime = adapterOptions.sessionTime || 86400;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.metamaskProvider) {\n      return this.metamaskProvider as SafeEventEmitterProvider;\n    }\n    return null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    this.metamaskProvider = (await detectEthereumProvider({ mustBeMetaMask: true })) as EthereumProvider;\n    if (!this.metamaskProvider) throw WalletInitializationError.notInstalled(\"Metamask extension is not installed\");\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.METAMASK);\n    try {\n      log.debug(\"initializing metamask adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  setAdapterSettings(options: { sessionTime?: number }): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    if (options?.sessionTime) {\n      this.sessionTime = options.sessionTime;\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    // set default to mainnet\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.METAMASK });\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not able to connect with metamask\");\n    try {\n      await this.metamaskProvider.request({ method: \"eth_requestAccounts\" });\n      const { chainId } = this.metamaskProvider;\n      if (chainId !== (this.chainConfig as CustomChainConfig).chainId) {\n        await this.switchChain(this.chainConfig as CustomChainConfig);\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Failed to connect with provider\");\n      this.provider.once(\"disconnect\", () => {\n        // ready to be connected again\n        this.disconnect();\n      });\n      this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.METAMASK, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with metamask wallet\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    await super.disconnect();\n    this.provider?.removeAllListeners();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.metamaskProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  private async switchChain(chainConfig: CustomChainConfig): Promise<void> {\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    try {\n      await this.metamaskProvider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId: chainConfig.chainId }],\n      });\n    } catch (switchError: unknown) {\n      // This error code indicates that the chain has not been added to MetaMask.\n      if ((switchError as { code: number }).code === 4902) {\n        await this.metamaskProvider.request({\n          method: \"wallet_addEthereumChain\",\n          params: [{ chainId: chainConfig.chainId, chainName: chainConfig.displayName, rpcUrls: [chainConfig.rpcTarget] }],\n        });\n      } else {\n        throw switchError;\n      }\n    }\n  }\n}\n\nexport { MetamaskAdapter };\n","export * from \"./metamaskAdapter\";\n"],"names":["detectEthereumProvider","ADAPTER_CATEGORY","ADAPTER_EVENTS","ADAPTER_NAMESPACES","ADAPTER_STATUS","CHAIN_NAMESPACES","getChainConfig","log","WALLET_ADAPTERS","WalletInitializationError","WalletLoginError","BaseEvmAdapter","MetamaskAdapter","constructor","adapterOptions","EIP155","EXTERNAL","METAMASK","NOT_READY","chainConfig","sessionTime","provider","status","CONNECTED","metamaskProvider","_","Error","init","options","checkInitializationRequirements","mustBeMetaMask","notInstalled","READY","emit","debug","autoConnect","rehydrated","connect","error","ERRORED","setAdapterSettings","checkConnectionRequirements","CONNECTING","adapter","notConnectedError","request","method","chainId","switchChain","once","disconnect","reconnected","connectionError","cleanup","removeAllListeners","DISCONNECTED","getUserInfo","params","switchError","code","chainName","displayName","rpcUrls","rpcTarget"],"sourceRoot":""}