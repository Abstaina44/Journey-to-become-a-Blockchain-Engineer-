{"version":3,"file":"solanaProvider.cjs.js","mappings":"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","sources":["webpack://@web3auth/solana-provider/webpack/bootstrap","webpack://@web3auth/solana-provider/webpack/runtime/compat get default export","webpack://@web3auth/solana-provider/webpack/runtime/define property getters","webpack://@web3auth/solana-provider/webpack/runtime/hasOwnProperty shorthand","webpack://@web3auth/solana-provider/webpack/runtime/make namespace object","webpack://@web3auth/solana-provider/external commonjs2 \"@babel/runtime/helpers/defineProperty\"","webpack://@web3auth/solana-provider/external commonjs2 \"@toruslabs/base-controllers\"","webpack://@web3auth/solana-provider/external commonjs2 \"@toruslabs/openlogin-jrpc\"","webpack://@web3auth/solana-provider/external commonjs2 \"@web3auth/base\"","webpack://@web3auth/solana-provider/external commonjs2 \"@web3auth/base-provider\"","webpack://@web3auth/solana-provider/./src/rpc/JrpcClient.ts","webpack://@web3auth/solana-provider/./src/rpc/solanaRpcMiddlewares.ts","webpack://@web3auth/solana-provider/./src/providers/injectedProviders/base/baseInjectedProvider.ts","webpack://@web3auth/solana-provider/external commonjs2 \"bs58\"","webpack://@web3auth/solana-provider/external commonjs2 \"eth-rpc-errors\"","webpack://@web3auth/solana-provider/./src/providers/injectedProviders/base/providerHandlers.ts","webpack://@web3auth/solana-provider/./src/providers/injectedProviders/injectedProviderProxy.ts","webpack://@web3auth/solana-provider/./src/providers/injectedProviders/phantom/phantomInjectedProvider.ts","webpack://@web3auth/solana-provider/external commonjs2 \"@solana/web3.js\"","webpack://@web3auth/solana-provider/./src/providers/injectedProviders/slope/providerHandlers.ts","webpack://@web3auth/solana-provider/./src/providers/injectedProviders/slope/slopeInjectedProvider.ts","webpack://@web3auth/solana-provider/./src/providers/injectedProviders/solflare/providerHandlers.ts","webpack://@web3auth/solana-provider/./src/providers/injectedProviders/solflare/solflareInjectedProvider.ts","webpack://@web3auth/solana-provider/./src/providers/injectedProviders/sollet/providerHandlers.ts","webpack://@web3auth/solana-provider/./src/providers/injectedProviders/sollet/solletInjectedProvider.ts","webpack://@web3auth/solana-provider/./src/providers/injectedProviders/torus/providerHandlers.ts","webpack://@web3auth/solana-provider/./src/providers/injectedProviders/torus/torusInjectedProvider.ts","webpack://@web3auth/solana-provider/./src/providers/injectedProviders/index.ts","webpack://@web3auth/solana-provider/external commonjs2 \"@toruslabs/tweetnacl-js\"","webpack://@web3auth/solana-provider/./src/providers/privateKeyProvider/solanaPrivateKeyUtils.ts","webpack://@web3auth/solana-provider/./src/providers/privateKeyProvider/solanaPrivateKeyProvider.ts","webpack://@web3auth/solana-provider/./src/providers/privateKeyProvider/index.ts","webpack://@web3auth/solana-provider/./src/providers/index.ts","webpack://@web3auth/solana-provider/./src/solanaWallet.ts","webpack://@web3auth/solana-provider/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/base-controllers\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/openlogin-jrpc\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/base\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/base-provider\");","import { createFetchMiddleware } from \"@toruslabs/base-controllers\";\nimport { JRPCEngineEndCallback, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig } from \"@web3auth/base\";\n\nexport function createChainIdMiddleware(chainId: string): JRPCMiddleware<unknown, unknown> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<string>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"solana_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createProviderConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  return (\n    req: JRPCRequest<unknown>,\n    res: JRPCResponse<Omit<CustomChainConfig, \"chainNamespace\">>,\n    next: JRPCEngineNextCallback,\n    end: JRPCEngineEndCallback\n  ) => {\n    if (req.method === \"solana_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  const { chainId } = providerConfig;\n\n  return mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig)]);\n}\n\nexport function createJsonRpcClient(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): {\n  networkMiddleware: JRPCMiddleware<unknown, unknown>;\n  fetchMiddleware: JRPCMiddleware<unknown, unknown>;\n} {\n  const { rpcTarget } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({ rpcTarget });\n  const networkMiddleware = mergeMiddleware([createConfigMiddleware(providerConfig), fetchMiddleware]);\n  return { networkMiddleware, fetchMiddleware };\n}\n","import type { Transaction } from \"@solana/web3.js\";\nimport { createAsyncMiddleware, JRPCMiddleware, JRPCRequest, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nexport interface IProviderHandlers {\n  requestAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getPrivateKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signTransaction: (req: JRPCRequest<{ message: Transaction }>) => Promise<Transaction>;\n  signAllTransactions: (req: JRPCRequest<{ message: Transaction[] }>) => Promise<Transaction[]>;\n  signAndSendTransaction: (req: JRPCRequest<{ message: Transaction }>) => Promise<{ signature: string }>;\n  getSecretKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signMessage: (req: JRPCRequest<{ message: Uint8Array; display?: string }>) => Promise<Uint8Array>;\n}\n\nexport function createGetAccountsMiddleware({ getAccounts }: { getAccounts: IProviderHandlers[\"getAccounts\"] }): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"getAccounts\") return next();\n\n    if (!getAccounts) throw new Error(\"WalletMiddleware - opts.getAccounts not provided\");\n    // This calls from the prefs controller\n    const accounts = await getAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createRequestAccountsMiddleware({\n  requestAccounts,\n}: {\n  requestAccounts: IProviderHandlers[\"requestAccounts\"];\n}): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"requestAccounts\") return next();\n\n    if (!requestAccounts) throw new Error(\"WalletMiddleware - opts.requestAccounts not provided\");\n    // This calls the UI login function\n    const accounts = await requestAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createGenericJRPCMiddleware<T, U>(\n  targetMethod: string,\n  handler: (req: JRPCRequest<T>) => Promise<U>\n): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware<T, unknown>(async (request, response, next) => {\n    const { method } = request;\n    if (method !== targetMethod) return next();\n\n    if (!handler) throw new Error(`WalletMiddleware - ${targetMethod} not provided`);\n\n    const result = await handler(request);\n\n    response.result = result;\n    return undefined;\n  });\n}\n\nexport function createSolanaMiddleware(providerHandlers: IProviderHandlers): JRPCMiddleware<unknown, unknown> {\n  const { getAccounts, requestAccounts, signTransaction, signAndSendTransaction, signAllTransactions, signMessage, getPrivateKey, getSecretKey } =\n    providerHandlers;\n\n  return mergeMiddleware([\n    createRequestAccountsMiddleware({ requestAccounts }),\n    createGetAccountsMiddleware({ getAccounts }),\n    createGenericJRPCMiddleware<{ message: Transaction }, Transaction>(\"signTransaction\", signTransaction),\n    createGenericJRPCMiddleware<{ message: Transaction }, { signature: string }>(\"signAndSendTransaction\", signAndSendTransaction),\n    createGenericJRPCMiddleware<{ message: Transaction[] }, Transaction[]>(\"signAllTransactions\", signAllTransactions),\n    createGenericJRPCMiddleware<{ message: Uint8Array }, Uint8Array>(\"signMessage\", signMessage),\n    createGenericJRPCMiddleware<void, string>(\"solanaPrivateKey\", getPrivateKey),\n    createGenericJRPCMiddleware<void, string>(\"solanaSecretKey\", getSecretKey),\n  ]);\n}\nexport interface AddSolanaChainParameter {\n  chainId: string; // A 0x-prefixed hexadecimal string\n  chainName: string;\n  nativeCurrency: {\n    name: string;\n    symbol: string; // 2-6 characters long\n    decimals: 18;\n  };\n  rpcUrls: string[];\n  blockExplorerUrls?: string[];\n}\n\nexport interface IChainSwitchHandlers {\n  addNewChainConfig: (req: JRPCRequest<AddSolanaChainParameter>) => Promise<void>;\n  switchSolanaChain: (req: JRPCRequest<{ chainId: string }>) => Promise<void>;\n}\nexport function createChainSwitchMiddleware({ addNewChainConfig, switchSolanaChain }: IChainSwitchHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([\n    createGenericJRPCMiddleware<AddSolanaChainParameter, void>(\"addSolanaChain\", addNewChainConfig),\n    createGenericJRPCMiddleware<{ chainId: string }, void>(\"switchSolanaChain\", switchSolanaChain),\n  ]);\n}\n\nexport interface IAccountHandlers {\n  updatePrivatekey: (req: JRPCRequest<{ privateKey: string }>) => Promise<void>;\n}\nexport function createAccountMiddleware({ updatePrivatekey }: IAccountHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([createGenericJRPCMiddleware<{ privateKey: string }, void>(\"updateAccount\", updatePrivatekey)]);\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\n\nimport { createConfigMiddleware } from \"../../../rpc/JrpcClient\";\nimport { createSolanaMiddleware, IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport abstract class BaseInjectedProvider<P> extends BaseProvider<BaseProviderConfig, BaseProviderState, P> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(_: { chainId: string }): Promise<void> {\n    return Promise.resolve();\n  }\n\n  public async setupProvider(injectedProvider: P): Promise<void> {\n    const engine = new JRPCEngine();\n\n    const providerHandlers = this.getProviderHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    engine.push(solanaMiddleware);\n\n    const configMiddleware = createConfigMiddleware(this.config.chainConfig as CustomChainConfig);\n    engine.push(configMiddleware);\n\n    const injectedProviderProxy = this.getInjectedProviderProxy(injectedProvider);\n    if (injectedProviderProxy) {\n      engine.push(injectedProviderProxy);\n    }\n\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    const { chainConfig } = this.config;\n    this.update({\n      chainId: chainConfig.chainId,\n    });\n    return chainConfig.chainId || \"\";\n  }\n\n  protected getInjectedProviderProxy(_: P): JRPCMiddleware<unknown, unknown> {\n    return undefined;\n  }\n\n  protected abstract getProviderHandlers(injectedProvider: P): IProviderHandlers;\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"bs58\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"eth-rpc-errors\");","import { Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getBaseProviderHandlers = (injectedProvider: IBaseWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : [];\n    },\n    getAccounts: async () => (injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : []),\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<Transaction> => {\n      const transaction = await injectedProvider.signTransaction(req.params.message);\n      return transaction;\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array; display?: \"utf8\" | \"hex\" }>): Promise<Uint8Array> => {\n      const sigData = await injectedProvider.signMessage(req.params.message, req.params.display);\n      return sigData.signature;\n    },\n    signAllTransactions: async (req: JRPCRequest<{ message: Transaction[] }>): Promise<Transaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = await injectedProvider.signAllTransactions(req.params.message);\n      return transaction;\n    },\n    signAndSendTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n      const txRes = await injectedProvider.signAndSendTransaction(req.params.message);\n      return { signature: txRes.signature };\n    },\n  };\n  return providerHandlers;\n};\n","import { createAsyncMiddleware, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse } from \"@toruslabs/openlogin-jrpc\";\n\nimport { InjectedProvider } from \"./interface\";\n\nexport function createInjectedProviderProxyMiddleware(provider: InjectedProvider): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (req: JRPCRequest<unknown[]>, res: JRPCResponse<unknown>, _next: JRPCEngineNextCallback) => {\n    const result = await provider.request({\n      ...req,\n    });\n    res.result = result;\n  });\n}\n","import { JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nimport { IPhantomWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\n\nexport class PhantomInjectedProvider extends BaseInjectedProvider<IPhantomWalletProvider> {\n  protected getProviderHandlers(injectedProvider: IPhantomWalletProvider): IProviderHandlers {\n    return getBaseProviderHandlers(injectedProvider);\n  }\n\n  protected getInjectedProviderProxy(injectedProvider: IPhantomWalletProvider): JRPCMiddleware<unknown, unknown> {\n    return createInjectedProviderProxyMiddleware(injectedProvider);\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@solana/web3.js\");","import { Connection, PublicKey, Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ISlopeProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getSlopeHandlers = (injectedProvider: ISlopeProvider, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      const { data } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getAccounts: async () => {\n      const { data } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<Transaction> => {\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({ message: \"Invalid transaction message\" });\n      const { data } = await injectedProvider.signTransaction(bs58.encode(txMessage.serializeMessage()));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, signature);\n      return txMessage;\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      const response = await injectedProvider.signMessage(req.params.message);\n      return bs58.decode(response.data.signature);\n    },\n    signAndSendTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n      const provider = getProviderEngineProxy();\n      if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({ message: \"Invalid transaction message\" });\n      const { data } = await injectedProvider.signTransaction(bs58.encode(txMessage.serializeMessage()));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, signature);\n      const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n      const conn = new Connection(chainConfig.rpcTarget);\n      const res = await conn.sendRawTransaction(txMessage.serialize());\n      return { signature: res };\n    },\n    signAllTransactions: async (req: JRPCRequest<{ message: Transaction[] }>): Promise<Transaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const allTxns = req.params.message;\n      const { length } = allTxns;\n\n      const unsignedTx = [];\n\n      for (let i = 0; i < length; i++) {\n        unsignedTx.push(bs58.encode(req.params.message[i].serializeMessage()));\n      }\n      const { msg, data } = await injectedProvider.signAllTransactions(unsignedTx);\n\n      if (!data.publicKey || data.signatures?.length !== length) throw new Error(msg);\n\n      const publicKey = new PublicKey(data.publicKey);\n\n      for (let i = 0; i < length; i++) {\n        const signature = bs58.decode(data.signatures[i]);\n        allTxns[i].addSignature(publicKey, signature);\n      }\n\n      return allTxns;\n    },\n  };\n  return providerHandlers;\n};\n","import { ISlopeProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSlopeHandlers } from \"./providerHandlers\";\n\nexport class SlopeInjectedProxyProvider extends BaseInjectedProvider<ISlopeProvider> {\n  protected getProviderHandlers(injectedProvider: ISlopeProvider): IProviderHandlers {\n    return getSlopeHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import { Connection, Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider, SolflareWallet } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\n\nexport const getSolflareHandlers = (injectedProvider: SolflareWallet, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const solflareProviderHandlers = getBaseProviderHandlers(injectedProvider as IBaseWalletProvider);\n  solflareProviderHandlers.signAndSendTransaction = async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n    const provider = getProviderEngineProxy();\n    if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const transaction = await injectedProvider.signTransaction(req.params.message);\n    const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n    const conn = new Connection(chainConfig.rpcTarget);\n    const res = await conn.sendRawTransaction(transaction.serialize());\n    return { signature: res };\n  };\n  return solflareProviderHandlers;\n};\n","import { SolflareWallet } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSolflareHandlers } from \"./providerHandlers\";\n\nexport class SolflareInjectedProvider extends BaseInjectedProvider<SolflareWallet> {\n  protected getProviderHandlers(injectedProvider: SolflareWallet): IProviderHandlers {\n    return getSolflareHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import type SolletWallet from \"@project-serum/sol-wallet-adapter\";\nimport { Connection, Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\n\nexport const getSolletHandlers = (injectedProvider: SolletWallet, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const providerHandlers = getBaseProviderHandlers(injectedProvider as IBaseWalletProvider);\n  providerHandlers.signMessage = async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n    const { signature } = await injectedProvider.sign(req.params.message, \"utf8\");\n    return signature;\n  };\n  providerHandlers.signAndSendTransaction = async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n    const provider = getProviderEngineProxy();\n    if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const transaction = await injectedProvider.signTransaction(req.params.message);\n    const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n    const conn = new Connection(chainConfig.rpcTarget);\n    const res = await conn.sendRawTransaction(transaction.serialize());\n    return { signature: res };\n  };\n  return providerHandlers;\n};\n","import type SolletWallet from \"@project-serum/sol-wallet-adapter\";\n\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSolletHandlers } from \"./providerHandlers\";\n\nexport class SolletInjectedProvider extends BaseInjectedProvider<SolletWallet> {\n  protected getProviderHandlers(injectedProvider: SolletWallet): IProviderHandlers {\n    return getSolletHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import { Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ITorusWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getTorusHandlers = (injectedProvider: ITorusWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      const accounts = await injectedProvider.request<string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getAccounts: async () => {\n      const accounts = await injectedProvider.request<string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const message = await injectedProvider.signMessage(req.params.message);\n      return message;\n    },\n\n    signTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<Transaction> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.signTransaction(txMessage);\n      return response;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.sendTransaction(txMessage);\n      return { signature: response };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: Transaction[] }>): Promise<Transaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transactions = req.params.message;\n      const response = await injectedProvider.signAllTransactions(transactions);\n      return response;\n    },\n  };\n  return providerHandlers;\n};\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, isHexStrict, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ITorusWalletProvider } from \"../../../interface\";\nimport { createSolanaMiddleware } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\nimport { getTorusHandlers } from \"./providerHandlers\";\n\nexport class TorusInjectedProvider extends BaseProvider<BaseProviderConfig, BaseProviderState, ITorusWalletProvider> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(_: { chainId: string }): Promise<void> {\n    return Promise.resolve();\n  }\n\n  public async setupProvider(injectedProvider: ITorusWalletProvider): Promise<void> {\n    this.handleInjectedProviderUpdate(injectedProvider);\n    await this.setupEngine(injectedProvider);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this.provider) throw ethErrors.provider.custom({ message: \"Torus solana provider is not initialized\", code: 4902 });\n    const { chainId } = this.config.chainConfig;\n\n    const connectedChainId = await this.provider.request<unknown, string>({\n      method: \"solana_chainId\",\n    });\n\n    const connectedHexChainId = isHexStrict(connectedChainId.toString()) ? connectedChainId : `0x${parseInt(connectedChainId, 10).toString(16)}`;\n    if (chainId !== connectedHexChainId)\n      throw WalletInitializationError.rpcConnectionError(`Invalid network, net_version is: ${connectedHexChainId}, expected: ${chainId}`);\n\n    this.update({ chainId: connectedHexChainId });\n    this.provider.emit(\"connect\", { chainId: this.state.chainId });\n    this.provider.emit(\"chainChanged\", this.state.chainId);\n    return this.state.chainId;\n  }\n\n  private async setupEngine(injectedProvider: ITorusWalletProvider): Promise<void> {\n    const providerHandlers = getTorusHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    const injectedProviderProxy = createInjectedProviderProxyMiddleware(injectedProvider);\n    const engine = new JRPCEngine();\n    engine.push(solanaMiddleware);\n    engine.push(injectedProviderProxy);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  private async handleInjectedProviderUpdate(injectedProvider: ITorusWalletProvider): Promise<void> {\n    injectedProvider.on(\"accountsChanged\", async (accounts: string[]) => {\n      this.provider.emit(\"accountsChanged\", accounts);\n    });\n    injectedProvider.on(\"chainChanged\", async (chainId: string) => {\n      const connectedHexChainId = isHexStrict(chainId) ? chainId : `0x${parseInt(chainId, 10).toString(16)}`;\n      // Check if chainId changed and trigger event\n      this.configure({\n        chainConfig: { ...this.config.chainConfig, chainId: connectedHexChainId },\n      });\n      await this.setupProvider(injectedProvider);\n    });\n  }\n}\n","export * from \"./interface\";\nexport * from \"./phantom/phantomInjectedProvider\";\nexport * from \"./slope/slopeInjectedProvider\";\nexport * from \"./solflare/solflareInjectedProvider\";\nexport * from \"./sollet/solletInjectedProvider\";\nexport * from \"./torus/torusInjectedProvider\";\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/tweetnacl-js\");","import { Keypair, Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport nacl from \"@toruslabs/tweetnacl-js\";\nimport { SafeEventEmitterProvider, WalletInitializationError } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IProviderHandlers } from \"../../rpc/solanaRpcMiddlewares\";\n\nexport async function getProviderHandlers({\n  privKey,\n  getProviderEngineProxy,\n}: {\n  privKey: string;\n  getProviderEngineProxy: () => SafeEventEmitterProvider | null;\n}): Promise<IProviderHandlers> {\n  const keyPairGenerator = (): Keypair => {\n    return Keypair.fromSecretKey(Buffer.from(privKey, \"hex\"));\n  };\n  if (typeof privKey !== \"string\") throw WalletInitializationError.invalidParams(\"privKey must be a string\");\n  const keyPair = keyPairGenerator();\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return [keyPair.publicKey.toBase58()];\n    },\n    getAccounts: async () => [keyPair.publicKey.toBase58()],\n\n    getPrivateKey: async () => privKey,\n    getSecretKey: async () => bs58.encode(keyPair.secretKey),\n\n    signTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<Transaction> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = req.params.message;\n      transaction.partialSign(keyPair);\n      return transaction;\n    },\n\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const signedMsg = nacl.sign.detached(req.params.message, keyPair.secretKey);\n      return signedMsg;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const _providerEngineProxy = getProviderEngineProxy();\n      if (!_providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n\n      const transaction = req.params.message;\n      transaction.sign(keyPair);\n\n      const sig = await _providerEngineProxy.request<string>({\n        method: \"sendTransaction\",\n        params: [bs58.encode(transaction.serialize())],\n      });\n      return { signature: sig };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: Transaction[] }>): Promise<Transaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const txns = req.params?.message;\n      for (const tx of txns || []) {\n        const transaction = tx;\n        transaction.partialSign(keyPair);\n      }\n      return txns;\n    },\n  };\n\n  return providerHandlers;\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware, JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { createJsonRpcClient } from \"../../rpc/JrpcClient\";\nimport {\n  AddSolanaChainParameter,\n  createAccountMiddleware,\n  createChainSwitchMiddleware,\n  createSolanaMiddleware,\n  IAccountHandlers,\n  IChainSwitchHandlers,\n} from \"../../rpc/solanaRpcMiddlewares\";\nimport { getProviderHandlers } from \"./solanaPrivateKeyUtils\";\n\nexport interface SolanaPrivKeyProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\nexport interface SolanaPrivKeyProviderState extends BaseProviderState {\n  privateKey?: string;\n}\nexport class SolanaPrivateKeyProvider extends BaseProvider<BaseProviderConfig, SolanaPrivKeyProviderState, string> {\n  constructor({ config, state }: { config: SolanaPrivKeyProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public static getProviderInstance = async (params: {\n    privKey: string;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n  }): Promise<SolanaPrivateKeyProvider> => {\n    const providerFactory = new SolanaPrivateKeyProvider({ config: { chainConfig: params.chainConfig } });\n    await providerFactory.setupProvider(params.privKey);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.state.privateKey)\n      throw ethErrors.provider.custom({ message: \"Private key is not found in state, plz pass it in constructor state param\", code: 4902 });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request<unknown, string[]>({ method: \"eth_accounts\" });\n  }\n\n  public async setupProvider(privKey: string): Promise<void> {\n    const providerHandlers = await getProviderHandlers({ privKey, getProviderEngineProxy: this.getProviderEngineProxy.bind(this) });\n\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n\n    const engine = new JRPCEngine();\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(this.getChainSwitchMiddleware());\n    engine.push(this.getAccountMiddleware());\n    engine.push(solanaMiddleware);\n    engine.push(networkMiddleware);\n\n    const provider = providerFromEngine(engine);\n\n    this.updateProviderEngineProxy(provider);\n\n    await this.lookupNetwork();\n  }\n\n  public async updateAccount(params: { privateKey: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const existingKey = await this._providerEngineProxy.request<unknown, string>({ method: \"solanaPrivateKey\" });\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n      this._providerEngineProxy.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request<unknown, string[]>({ method: \"requestAccounts\" }),\n      });\n    }\n  }\n\n  public async switchChain(params: { chainId: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\",\n    });\n    this.configure({ chainConfig });\n    const privKey = await this._providerEngineProxy.request<unknown, string>({ method: \"solanaPrivateKey\" });\n    await this.setupProvider(privKey);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const health = await this._providerEngineProxy.request<unknown, string>({\n      method: \"getHealth\",\n      params: [],\n    });\n    const { chainConfig } = this.config;\n    if (health !== \"ok\")\n      throw WalletInitializationError.rpcConnectionError(`Failed to lookup network for following rpc target: ${chainConfig.rpcTarget}`);\n    this.update({ chainId: chainConfig.chainId });\n    if (this.state.chainId !== chainConfig.chainId) {\n      this.provider.emit(\"chainChanged\", this.state.chainId);\n      this.provider.emit(\"connect\", { chainId: this.state.chainId });\n    }\n    return this.state.chainId;\n  }\n\n  private getChainSwitchMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const chainSwitchHandlers: IChainSwitchHandlers = {\n      addNewChainConfig: async (req: JRPCRequest<AddSolanaChainParameter>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        const { chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency } = req.params;\n\n        if (!chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n        if (!rpcUrls || rpcUrls.length === 0) throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n        if (!nativeCurrency) throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n        this.addChain({\n          chainNamespace: CHAIN_NAMESPACES.SOLANA,\n          chainId,\n          ticker: nativeCurrency?.symbol || \"SOL\",\n          tickerName: nativeCurrency?.name || \"Solana\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: blockExplorerUrls?.[0] || \"\",\n        });\n      },\n      switchSolanaChain: async (req: JRPCRequest<{ chainId: string }>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n        await this.switchChain(req.params);\n      },\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  private getAccountMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const accountHandlers: IAccountHandlers = {\n      updatePrivatekey: async (req: JRPCRequest<{ privateKey: string }>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.privateKey) throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n        const { privateKey } = req.params;\n        await this.updateAccount({ privateKey });\n      },\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n}\n","export * from \"./solanaPrivateKeyProvider\";\n","export * from \"./injectedProviders\";\nexport * from \"./privateKeyProvider\";\n","import { Transaction } from \"@solana/web3.js\";\nimport { RequestArguments, SafeEventEmitterProvider } from \"@web3auth/base\";\n\nimport { ISolanaWallet } from \"./interface\";\n\nexport class SolanaWallet implements ISolanaWallet {\n  public provider: SafeEventEmitterProvider;\n\n  constructor(provider: SafeEventEmitterProvider) {\n    this.provider = provider;\n  }\n\n  public async requestAccounts(): Promise<string[]> {\n    const accounts = await this.provider.request<string[]>({\n      method: \"requestAccounts\",\n      params: {},\n    });\n    return accounts;\n  }\n\n  public async signAndSendTransaction(transaction: Transaction): Promise<{ signature: string }> {\n    const { signature } = await this.provider.request<{ signature: string }>({\n      method: \"signAndSendTransaction\",\n      params: {\n        message: transaction,\n      },\n    });\n    return { signature };\n  }\n\n  public async signTransaction(transaction: Transaction): Promise<Transaction> {\n    const signedTransaction = (await this.provider.request({\n      method: \"signTransaction\",\n      params: {\n        message: transaction,\n      },\n    })) as Transaction;\n    return signedTransaction;\n  }\n\n  public async signAllTransactions(transactions: Transaction[]): Promise<Transaction[]> {\n    const signedTransactions = (await this.provider.request({\n      method: \"signAllTransactions\",\n      params: {\n        message: transactions,\n      },\n    })) as Transaction[];\n    return signedTransactions;\n  }\n\n  public async signMessage(data: Uint8Array): Promise<Uint8Array> {\n    const response = await this.provider.request<Uint8Array>({\n      method: \"signMessage\",\n      params: {\n        message: data,\n      },\n    });\n    return response as Uint8Array;\n  }\n\n  public async request<T>(args: RequestArguments): Promise<T> {\n    const result = await this.provider.request<T>(args);\n    return result as T;\n  }\n}\n","export * from \"./interface\";\nexport * from \"./providers\";\nexport * from \"./solanaWallet\";\n"],"names":["createFetchMiddleware","mergeMiddleware","createChainIdMiddleware","chainId","req","res","next","end","method","result","createProviderConfigMiddleware","providerConfig","createConfigMiddleware","createJsonRpcClient","rpcTarget","fetchMiddleware","networkMiddleware","createAsyncMiddleware","createGetAccountsMiddleware","getAccounts","request","response","Error","accounts","undefined","createRequestAccountsMiddleware","requestAccounts","createGenericJRPCMiddleware","targetMethod","handler","createSolanaMiddleware","providerHandlers","signTransaction","signAndSendTransaction","signAllTransactions","signMessage","getPrivateKey","getSecretKey","createChainSwitchMiddleware","addNewChainConfig","switchSolanaChain","createAccountMiddleware","updatePrivatekey","providerFromEngine","JRPCEngine","CHAIN_NAMESPACES","BaseProvider","BaseInjectedProvider","constructor","config","state","chainConfig","chainNamespace","SOLANA","switchChain","_","Promise","resolve","setupProvider","injectedProvider","engine","getProviderHandlers","solanaMiddleware","push","configMiddleware","injectedProviderProxy","getInjectedProviderProxy","provider","updateProviderEngineProxy","lookupNetwork","update","bs58","ethErrors","getBaseProviderHandlers","publicKey","encode","toBytes","rpc","methodNotSupported","transaction","params","message","sigData","display","signature","length","invalidParams","txRes","createInjectedProviderProxyMiddleware","_next","PhantomInjectedProvider","Connection","PublicKey","getSlopeHandlers","getProviderEngineProxy","data","connect","txMessage","invalidRequest","serializeMessage","decode","addSignature","custom","code","conn","sendRawTransaction","serialize","allTxns","unsignedTx","i","msg","signatures","SlopeInjectedProxyProvider","bind","getSolflareHandlers","solflareProviderHandlers","SolflareInjectedProvider","getSolletHandlers","sign","SolletInjectedProvider","getTorusHandlers","sendTransaction","transactions","isHexStrict","WalletInitializationError","TorusInjectedProvider","handleInjectedProviderUpdate","setupEngine","connectedChainId","connectedHexChainId","toString","parseInt","rpcConnectionError","emit","on","configure","Keypair","nacl","privKey","keyPairGenerator","fromSecretKey","Buffer","from","keyPair","toBase58","secretKey","partialSign","signedMsg","detached","_providerEngineProxy","sig","txns","tx","SolanaPrivateKeyProvider","enable","privateKey","getChainSwitchMiddleware","getAccountMiddleware","updateAccount","existingKey","getChainConfig","health","chainSwitchHandlers","chainName","rpcUrls","blockExplorerUrls","nativeCurrency","addChain","ticker","symbol","tickerName","name","displayName","blockExplorer","chainSwitchMiddleware","accountHandlers","providerFactory","SolanaWallet","signedTransaction","signedTransactions","args"],"sourceRoot":""}