{"version":3,"file":"ethereumProvider.cjs.js","mappings":"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","sources":["webpack://@web3auth/ethereum-provider/webpack/bootstrap","webpack://@web3auth/ethereum-provider/webpack/runtime/compat get default export","webpack://@web3auth/ethereum-provider/webpack/runtime/define property getters","webpack://@web3auth/ethereum-provider/webpack/runtime/hasOwnProperty shorthand","webpack://@web3auth/ethereum-provider/webpack/runtime/make namespace object","webpack://@web3auth/ethereum-provider/external commonjs2 \"@babel/runtime/helpers/defineProperty\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@toruslabs/base-controllers\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@toruslabs/openlogin-jrpc\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@web3auth/base\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@web3auth/base-provider\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"eth-rpc-errors\"","webpack://@web3auth/ethereum-provider/./src/rpc/walletMidddleware.ts","webpack://@web3auth/ethereum-provider/./src/rpc/ethRpcMiddlewares.ts","webpack://@web3auth/ethereum-provider/./src/rpc/jrpcClient.ts","webpack://@web3auth/ethereum-provider/./src/providers/injectedProviders/walletConnectUtils.ts","webpack://@web3auth/ethereum-provider/./src/providers/injectedProviders/WalletConnectProvider.ts","webpack://@web3auth/ethereum-provider/./src/providers/injectedProviders/index.ts","webpack://@web3auth/ethereum-provider/external commonjs2 \"@ethereumjs/tx\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@metamask/eth-sig-util\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"ethereumjs-util\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@toruslabs/http-helpers\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"assert\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"jsonschema\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"bignumber.js\"","webpack://@web3auth/ethereum-provider/./src/providers/converter.ts","webpack://@web3auth/ethereum-provider/./src/providers/privateKeyProviders/TransactionFormatter/utils.ts","webpack://@web3auth/ethereum-provider/./src/providers/privateKeyProviders/ethPrivatekeyUtils.ts","webpack://@web3auth/ethereum-provider/external commonjs2 \"@ethereumjs/common\"","webpack://@web3auth/ethereum-provider/./src/providers/utils.ts","webpack://@web3auth/ethereum-provider/./src/providers/privateKeyProviders/TransactionFormatter/constants.ts","webpack://@web3auth/ethereum-provider/./src/providers/privateKeyProviders/TransactionFormatter/index.ts","webpack://@web3auth/ethereum-provider/./src/providers/privateKeyProviders/EthereumPrivateKeyProvider.ts","webpack://@web3auth/ethereum-provider/./src/providers/privateKeyProviders/index.ts","webpack://@web3auth/ethereum-provider/./src/providers/index.ts","webpack://@web3auth/ethereum-provider/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/base-controllers\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/openlogin-jrpc\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/base\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/base-provider\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"eth-rpc-errors\");","import type { MessageTypes, TypedDataV1, TypedMessage } from \"@metamask/eth-sig-util\";\nimport { createAsyncMiddleware, createScaffoldMiddleware, JRPCMiddleware, JRPCRequest, JRPCResponse } from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport type { MessageParams, TransactionParams, TypedMessageParams, WalletMiddlewareOptions } from \"./interfaces\";\n\nfunction resemblesAddress(str: string): boolean {\n  // hex prefix 2 + 20 bytes\n  return str.length === 2 + 20 * 2;\n}\n\nexport function createWalletMiddleware({\n  getAccounts,\n  getPrivateKey,\n  processDecryptMessage,\n  processEncryptionPublicKey,\n  processEthSignMessage,\n  processPersonalMessage,\n  processTransaction,\n  processSignTransaction,\n  processTypedMessage,\n  processTypedMessageV3,\n  processTypedMessageV4,\n}: WalletMiddlewareOptions): JRPCMiddleware<string, unknown> {\n  if (!getAccounts) {\n    throw new Error(\"opts.getAccounts is required\");\n  }\n\n  //\n  // utility\n  //\n\n  /**\n   * Validates the keyholder address, and returns a normalized (i.e. lowercase)\n   * copy of it.\n   *\n   * an error\n   */\n  async function validateAndNormalizeKeyholder(address: string, req: JRPCRequest<unknown>): Promise<string> {\n    if (typeof address === \"string\" && address.length > 0) {\n      // ensure address is included in provided accounts\n      const accounts: string[] = await getAccounts(req);\n      const normalizedAccounts: string[] = accounts.map((_address) => _address.toLowerCase());\n      const normalizedAddress: string = address.toLowerCase();\n\n      if (normalizedAccounts.includes(normalizedAddress)) {\n        return normalizedAddress;\n      }\n    }\n    throw ethErrors.rpc.invalidParams({\n      message: `Invalid parameters: must provide an Ethereum address.`,\n    });\n  }\n\n  //\n  // account lookups\n  //\n\n  async function lookupAccounts(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    res.result = await getAccounts(req);\n  }\n\n  async function lookupDefaultAccount(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    const accounts = await getAccounts(req);\n    res.result = accounts[0] || null;\n  }\n\n  //\n  // transaction signatures\n  //\n\n  async function sendTransaction(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTransaction) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const txParams: TransactionParams = (req.params as TransactionParams[])[0] || {\n      from: \"\",\n    };\n    txParams.from = await validateAndNormalizeKeyholder(txParams.from as string, req);\n    res.result = await processTransaction(txParams, req);\n  }\n\n  async function signTransaction(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processSignTransaction) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const txParams: TransactionParams = (req.params as TransactionParams[])[0] || {\n      from: \"\",\n    };\n    txParams.from = await validateAndNormalizeKeyholder(txParams.from as string, req);\n    res.result = await processSignTransaction(txParams, req);\n  }\n\n  //\n  // message signatures\n  //\n\n  async function ethSign(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processEthSignMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[0], req);\n    const message: string = (req.params as string[])[1];\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n    const msgParams: MessageParams<string> = {\n      ...extraParams,\n      from: address,\n      data: message,\n    };\n\n    res.result = await processEthSignMessage(msgParams, req);\n  }\n\n  async function signTypedData(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTypedMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const message: TypedDataV1 = (req.params as TypedDataV1[])[0];\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[1], req);\n    const version = \"V1\";\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n    const msgParams: MessageParams<TypedDataV1> = {\n      ...extraParams,\n      from: address,\n      data: message,\n    };\n\n    res.result = await processTypedMessage(msgParams, req, version);\n  }\n\n  async function signTypedDataV3(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTypedMessageV3) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[0], req);\n    const message: TypedMessage<MessageTypes> = (req.params as TypedMessage<MessageTypes>[])[1];\n    const version = \"V3\";\n    const msgParams: TypedMessageParams<TypedMessage<MessageTypes>> = {\n      data: message,\n      from: address,\n      version,\n    };\n\n    res.result = await processTypedMessageV3(msgParams, req, version);\n  }\n\n  async function signTypedDataV4(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTypedMessageV4) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[0], req);\n    const message: TypedMessage<MessageTypes> = (req.params as TypedMessage<MessageTypes>[])[1];\n    const version = \"V4\";\n    const msgParams: TypedMessageParams<TypedMessage<MessageTypes>> = {\n      data: message,\n      from: address,\n      version,\n    };\n\n    res.result = await processTypedMessageV4(msgParams, req, version);\n  }\n\n  async function personalSign(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processPersonalMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    // process normally\n    const firstParam: string = (req.params as string[])[0];\n    const secondParam: string = (req.params as string[])[1];\n    // non-standard \"extraParams\" to be appended to our \"msgParams\" obj\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n\n    // We initially incorrectly ordered these parameters.\n    // To gracefully respect users who adopted this API early,\n    // we are currently gracefully recovering from the wrong param order\n    // when it is clearly identifiable.\n    //\n    // That means when the first param is definitely an address,\n    // and the second param is definitely not, but is hex.\n    let address: string, message: string;\n    if (resemblesAddress(firstParam) && !resemblesAddress(secondParam)) {\n      let warning = `The eth_personalSign method requires params ordered `;\n      warning += `[message, address]. This was previously handled incorrectly, `;\n      warning += `and has been corrected automatically. `;\n      warning += `Please switch this param order for smooth behavior in the future.`;\n      (res as any).warning = warning;\n\n      address = firstParam;\n      message = secondParam;\n    } else {\n      message = firstParam;\n      address = secondParam;\n    }\n    address = await validateAndNormalizeKeyholder(address, req);\n\n    const msgParams: MessageParams<string> = {\n      ...extraParams,\n      from: address,\n      data: message,\n    };\n\n    // eslint-disable-next-line require-atomic-updates\n    res.result = await processPersonalMessage(msgParams, req);\n  }\n\n  async function encryptionPublicKey(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processEncryptionPublicKey) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string)[0], req);\n\n    res.result = await processEncryptionPublicKey(address, req);\n  }\n\n  async function decryptMessage(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processDecryptMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const ciphertext: string = (req.params as string)[0];\n    const address: string = await validateAndNormalizeKeyholder((req.params as string)[1], req);\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n    const msgParams: MessageParams<string> = {\n      ...extraParams,\n      from: address,\n      data: ciphertext,\n    };\n\n    res.result = processDecryptMessage(msgParams, req);\n  }\n\n  async function fetchPrivateKey(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!getPrivateKey) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n    res.result = getPrivateKey(req);\n  }\n\n  return createScaffoldMiddleware({\n    // account lookups\n    eth_accounts: createAsyncMiddleware(lookupAccounts),\n    eth_private_key: createAsyncMiddleware(fetchPrivateKey),\n    eth_coinbase: createAsyncMiddleware(lookupDefaultAccount),\n    // tx signatures\n    eth_sendTransaction: createAsyncMiddleware(sendTransaction),\n    eth_signTransaction: createAsyncMiddleware(signTransaction),\n    // message signatures\n    eth_sign: createAsyncMiddleware(ethSign),\n    eth_signTypedData: createAsyncMiddleware(signTypedData),\n    eth_signTypedData_v3: createAsyncMiddleware(signTypedDataV3),\n    eth_signTypedData_v4: createAsyncMiddleware(signTypedDataV4),\n    personal_sign: createAsyncMiddleware(personalSign),\n    eth_getEncryptionPublicKey: createAsyncMiddleware(encryptionPublicKey),\n    eth_decrypt: createAsyncMiddleware(decryptMessage),\n  });\n}\n","import {\n  createAsyncMiddleware,\n  createScaffoldMiddleware,\n  JRPCMiddleware,\n  JRPCRequest,\n  JRPCResponse,\n  mergeMiddleware,\n} from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { AddEthereumChainParameter, IAccountHandlers, IChainSwitchHandlers, IProviderHandlers } from \"./interfaces\";\nimport { createWalletMiddleware } from \"./walletMidddleware\";\n\nexport function createEthMiddleware(providerHandlers: IProviderHandlers): JRPCMiddleware<unknown, unknown> {\n  const {\n    getAccounts,\n    getPrivateKey,\n    processTransaction,\n    processSignTransaction,\n    processEthSignMessage,\n    processTypedMessage,\n    processTypedMessageV3,\n    processTypedMessageV4,\n    processPersonalMessage,\n    processEncryptionPublicKey,\n    processDecryptMessage,\n  } = providerHandlers;\n  const ethMiddleware = mergeMiddleware([\n    createScaffoldMiddleware({\n      eth_syncing: false,\n    }),\n    createWalletMiddleware({\n      getAccounts,\n      getPrivateKey,\n      processTransaction,\n      processEthSignMessage,\n      processSignTransaction,\n      processTypedMessage,\n      processTypedMessageV3,\n      processTypedMessageV4,\n      processPersonalMessage,\n      processEncryptionPublicKey,\n      processDecryptMessage,\n    }),\n  ]);\n  return ethMiddleware;\n}\n\nexport function createChainSwitchMiddleware({ addChain, switchChain }: IChainSwitchHandlers): JRPCMiddleware<unknown, unknown> {\n  async function addNewChain(req: JRPCRequest<AddEthereumChainParameter[]>, res: JRPCResponse<unknown>): Promise<void> {\n    const chainParams = req.params?.length ? req.params[0] : undefined;\n    if (!chainParams) throw ethErrors.rpc.invalidParams(\"Missing chain params\");\n    if (!chainParams.chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n    if (!chainParams.rpcUrls || chainParams.rpcUrls.length === 0) throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n    if (!chainParams.nativeCurrency) throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n\n    res.result = await addChain(chainParams);\n  }\n  async function updateChain(req: JRPCRequest<{ chainId: string }[]>, res: JRPCResponse<unknown>): Promise<void> {\n    const chainParams = req.params?.length ? req.params[0] : undefined;\n    if (!chainParams) throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n    res.result = await switchChain(chainParams);\n  }\n\n  return createScaffoldMiddleware({\n    wallet_addEthereumChain: createAsyncMiddleware(addNewChain),\n    wallet_switchEthereumChain: createAsyncMiddleware(updateChain),\n  });\n}\n\n// #region account middlewares\nexport function createAccountMiddleware({ updatePrivatekey }: IAccountHandlers): JRPCMiddleware<unknown, unknown> {\n  async function updateAccount(req: JRPCRequest<{ privateKey: string }[]>, res: JRPCResponse<unknown>): Promise<void> {\n    const accountParams = req.params?.length ? req.params[0] : undefined;\n    if (!accountParams?.privateKey) throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n    res.result = await updatePrivatekey(accountParams);\n  }\n\n  return createScaffoldMiddleware({\n    wallet_updateAccount: createAsyncMiddleware(updateAccount),\n  });\n}\n\n// #endregion account middlewares\n","import { createFetchMiddleware } from \"@toruslabs/base-controllers\";\nimport { JRPCEngineEndCallback, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport type { CustomChainConfig } from \"@web3auth/base\";\n\nexport function createChainIdMiddleware(chainId: string): JRPCMiddleware<unknown, unknown> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<string>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"eth_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createProviderConfigMiddleware(providerConfig: CustomChainConfig): JRPCMiddleware<unknown, unknown> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<CustomChainConfig>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"eth_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createJsonRpcClient(providerConfig: CustomChainConfig): {\n  networkMiddleware: JRPCMiddleware<unknown, unknown>;\n  fetchMiddleware: JRPCMiddleware<unknown, unknown>;\n} {\n  const { chainId, rpcTarget } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({ rpcTarget });\n  const networkMiddleware = mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig), fetchMiddleware]);\n  return { networkMiddleware, fetchMiddleware };\n}\n","import { MessageTypes, TypedDataV1, TypedMessage } from \"@metamask/eth-sig-util\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport type { IConnector, ITxData } from \"@walletconnect/types\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IProviderHandlers, MessageParams, TransactionParams, TypedMessageParams } from \"../../rpc/interfaces\";\n\nexport function getProviderHandlers({ connector }: { connector: IConnector }): IProviderHandlers {\n  return {\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getAccounts: async (_: JRPCRequest<unknown>) => {\n      const { accounts } = connector;\n      if (accounts && accounts.length) {\n        return accounts;\n      }\n      throw new Error(\"Failed to get accounts\");\n    },\n    processTransaction: async (txParams: TransactionParams, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.sendTransaction(txParams as ITxData);\n      return result;\n    },\n    processSignTransaction: async (txParams: TransactionParams, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.signTransaction(txParams as ITxData);\n      return result;\n    },\n    processEthSignMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.signMessage([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processPersonalMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.signPersonalMessage([msgParams.data, msgParams.from]);\n      return result;\n    },\n    processTypedMessage: async (msgParams: MessageParams<TypedDataV1>, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.signTypedData([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processTypedMessageV3: async (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>): Promise<string> => {\n      const result = await connector.signTypedData([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processTypedMessageV4: async (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>): Promise<string> => {\n      const result = await connector.signTypedData([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processEncryptionPublicKey: async (_: string): Promise<string> => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    processDecryptMessage: (_: MessageParams<string>): string => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n  };\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine } from \"@toruslabs/openlogin-jrpc\";\nimport type { IConnector } from \"@walletconnect/types\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, getChainConfig, isHexStrict, log, WalletInitializationError, WalletLoginError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { createEthMiddleware } from \"../../rpc/ethRpcMiddlewares\";\nimport { createJsonRpcClient } from \"../../rpc/jrpcClient\";\nimport { getProviderHandlers } from \"./walletConnectUtils\";\n\nexport interface WalletConnectProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\n\nexport interface WalletConnectProviderState extends BaseProviderState {\n  accounts: string[];\n}\n\nexport class WalletConnectProvider extends BaseProvider<BaseProviderConfig, WalletConnectProviderState, IConnector> {\n  private connector: IConnector | null = null;\n\n  constructor({ config, state, connector }: { config: WalletConnectProviderConfig; state?: BaseProviderState; connector?: IConnector }) {\n    super({\n      config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.EIP155 }, skipLookupNetwork: !!config.skipLookupNetwork },\n      state: { ...(state || {}), chainId: \"loading\", accounts: [] },\n    });\n    this.connector = connector || null;\n  }\n\n  public static getProviderInstance = async (params: {\n    connector: IConnector;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n    skipLookupNetwork: boolean;\n  }): Promise<WalletConnectProvider> => {\n    const providerFactory = new WalletConnectProvider({ config: { chainConfig: params.chainConfig, skipLookupNetwork: params.skipLookupNetwork } });\n    await providerFactory.setupProvider(params.connector);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.connector)\n      throw ethErrors.provider.custom({ message: \"Connector is not initialized, pass wallet connect connector in constructor\", code: 4902 });\n    await this.setupProvider(this.connector);\n    return this._providerEngineProxy.request({ method: \"eth_accounts\" });\n  }\n\n  public async setupProvider(connector: IConnector): Promise<void> {\n    this.onConnectorStateUpdate(connector);\n    await this.setupEngine(connector);\n  }\n\n  public async switchChain({ chainId, addChain = true, lookup = true }: { chainId: string; addChain?: boolean; lookup?: boolean }): Promise<void> {\n    if (!this.connector)\n      throw ethErrors.provider.custom({ message: \"Connector is not initialized, pass wallet connect connector in constructor\", code: 4902 });\n    const currentChainConfig = this.getChainConfig(chainId);\n    this.update({\n      chainId: \"loading\",\n    });\n    const { rpcTarget, displayName } = currentChainConfig;\n    if (addChain) {\n      try {\n        await this.connector.sendCustomRequest({\n          method: \"wallet_addEthereumChain\",\n          params: [{ chainId, chainName: displayName, rpcUrls: [rpcTarget] }],\n        });\n      } catch (error) {\n        log.error(error);\n      }\n    }\n\n    try {\n      await this.connector.sendCustomRequest({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId }],\n      });\n    } catch (error) {\n      log.error(error);\n      // ignore this error because metamask & others return provider.result as null\n      // wallet connect thinks this is wrong\n      if (error.message !== \"JSON RPC response format is invalid\") {\n        throw error;\n      }\n    }\n\n    this.configure({ chainConfig: currentChainConfig });\n    if (lookup) await this.lookupNetwork(this.connector);\n  }\n\n  async addChain(chainConfig: CustomChainConfig): Promise<void> {\n    if (!this.connector) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n    const { rpcTarget, displayName } = chainConfig;\n\n    try {\n      await this.connector.sendCustomRequest({\n        method: \"wallet_addEthereumChain\",\n        params: [{ chainId: chainConfig.chainId, chainName: displayName, rpcUrls: [rpcTarget] }],\n      });\n      super.addChain(chainConfig);\n    } catch (error) {\n      log.error(error);\n      throw error;\n    }\n  }\n\n  protected async lookupNetwork(connector: IConnector): Promise<string> {\n    if (!connector.connected) throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n    if (!this.provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const { chainId } = this.config.chainConfig;\n    const connectedHexChainId = isHexStrict(connector.chainId.toString()) ? connector.chainId : `0x${connector.chainId.toString(16)}`;\n    if (chainId !== connectedHexChainId)\n      throw WalletInitializationError.rpcConnectionError(`Invalid network, net_version is: ${connectedHexChainId}, expected: ${chainId}`);\n\n    this.provider.emit(\"connect\", { chainId });\n    this.provider.emit(\"chainChanged\", this.state.chainId);\n    return connectedHexChainId;\n  }\n\n  private async setupEngine(connector: IConnector): Promise<void> {\n    const providerHandlers = getProviderHandlers({ connector });\n    this.update({\n      accounts: connector.accounts || [],\n    });\n    const ethMiddleware = createEthMiddleware(providerHandlers);\n    const engine = new JRPCEngine();\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(ethMiddleware);\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    if (!this.config.skipLookupNetwork) await this.lookupNetwork(connector);\n  }\n\n  private async onConnectorStateUpdate(connector: IConnector) {\n    connector.on(\"session_update\", async (error: Error | null, payload) => {\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n      if (error) {\n        this.provider.emit(\"error\", error);\n        return;\n      }\n      const { accounts, chainId: connectedChainId, rpcUrl }: { accounts?: string[]; chainId?: number; rpcUrl?: string } = payload.params[0];\n      // Check if accounts changed and trigger event\n      if (accounts?.length && this.state.accounts[0] !== accounts[0]) {\n        this.update({\n          accounts,\n        });\n        // await this.setupEngine(connector);\n        this.provider.emit(\"accountsChanged\", accounts);\n      }\n      const connectedHexChainId = `0x${connectedChainId.toString(16)}`;\n      // Check if chainId changed and trigger event\n      if (connectedChainId && this.state.chainId !== connectedHexChainId) {\n        const maybeConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, connectedChainId) || {};\n        // Handle rpcUrl update\n        this.configure({\n          chainConfig: { ...maybeConfig, chainId: connectedHexChainId, rpcTarget: rpcUrl, chainNamespace: CHAIN_NAMESPACES.EIP155 },\n        });\n        await this.setupEngine(connector);\n      }\n    });\n  }\n}\n","export * from \"./WalletConnectProvider\";\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@ethereumjs/tx\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@metamask/eth-sig-util\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"ethereumjs-util\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/http-helpers\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"assert\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"jsonschema\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"bignumber.js\");","import BigNumber from \"bignumber.js\";\nimport { stripHexPrefix } from \"ethereumjs-util\";\n\ntype DenominationType = \"WEI\" | \"GWEI\" | \"ETH\";\ntype NumericBaseType = \"hex\" | \"dec\";\n\ntype ConverterInput = {\n  value: string | BigNumber;\n  fromNumericBase: NumericBaseType;\n  fromDenomination?: DenominationType;\n  toNumericBase?: NumericBaseType;\n  toDenomination?: DenominationType;\n  numberOfDecimals?: number;\n};\n// Big Number Constants\nconst BIG_NUMBER_WEI_MULTIPLIER = new BigNumber(\"1e18\");\nconst BIG_NUMBER_GWEI_MULTIPLIER = new BigNumber(\"1e9\");\nconst BIG_NUMBER_ETH_MULTIPLIER = new BigNumber(\"1\");\n\n// Setter Maps\nconst toBigNumber: Record<NumericBaseType, (n: string | BigNumber) => BigNumber> = {\n  hex: (n: string | BigNumber) => (typeof n === \"string\" ? new BigNumber(stripHexPrefix(n), 16) : new BigNumber(n, 16)),\n  dec: (n: string | BigNumber) => new BigNumber(n, 10),\n};\nconst toNormalizedDenomination: Record<string, (n: BigNumber) => BigNumber> = {\n  WEI: (bigNumber) => bigNumber.div(BIG_NUMBER_WEI_MULTIPLIER),\n  GWEI: (bigNumber) => bigNumber.div(BIG_NUMBER_GWEI_MULTIPLIER),\n  ETH: (bigNumber) => bigNumber.div(BIG_NUMBER_ETH_MULTIPLIER),\n};\nconst toSpecifiedDenomination: Record<string, (n: BigNumber) => BigNumber> = {\n  WEI: (bigNumber) => bigNumber.times(BIG_NUMBER_WEI_MULTIPLIER).dp(0, BigNumber.ROUND_HALF_UP),\n  GWEI: (bigNumber) => bigNumber.times(BIG_NUMBER_GWEI_MULTIPLIER).dp(9, BigNumber.ROUND_HALF_UP),\n  ETH: (bigNumber) => bigNumber.times(BIG_NUMBER_ETH_MULTIPLIER).dp(9, BigNumber.ROUND_HALF_UP),\n};\nconst baseChange: Record<string, (n: BigNumber) => string> = {\n  hex: (n) => n.toString(16),\n  dec: (n) => new BigNumber(n).toString(10),\n};\n\nconst converter = (params: ConverterInput): string | BigNumber => {\n  const { value, fromNumericBase, fromDenomination, toNumericBase, toDenomination, numberOfDecimals } = params;\n  let convertedValue: string | BigNumber = toBigNumber[fromNumericBase](value);\n\n  if (fromDenomination) {\n    convertedValue = toNormalizedDenomination[fromDenomination](convertedValue as BigNumber);\n  }\n\n  if (toDenomination) {\n    convertedValue = toSpecifiedDenomination[toDenomination](convertedValue as BigNumber);\n  }\n\n  if (numberOfDecimals) {\n    convertedValue = (convertedValue as BigNumber).dp(numberOfDecimals, BigNumber.ROUND_HALF_DOWN);\n  }\n\n  if (toNumericBase) {\n    convertedValue = baseChange[toNumericBase](convertedValue);\n  }\n  return convertedValue;\n};\n\nconst conversionUtil = (\n  value: string | BigNumber,\n  { fromNumericBase = \"hex\", toNumericBase, fromDenomination, toDenomination, numberOfDecimals }: Partial<ConverterInput>\n): BigNumber | string => {\n  return converter({\n    fromNumericBase,\n    toNumericBase,\n    fromDenomination,\n    toDenomination,\n    numberOfDecimals,\n    value: value || \"0\",\n  });\n};\n\nfunction decGWEIToHexWEI(decGWEI: string | BigNumber): string {\n  return conversionUtil(decGWEI, {\n    fromNumericBase: \"dec\",\n    toNumericBase: \"hex\",\n    fromDenomination: \"GWEI\",\n    toDenomination: \"WEI\",\n  }) as string;\n}\n\nfunction hexWEIToDecGWEI(decGWEI: string | BigNumber): string {\n  return conversionUtil(decGWEI, {\n    fromNumericBase: \"hex\",\n    toNumericBase: \"dec\",\n    fromDenomination: \"WEI\",\n    toDenomination: \"GWEI\",\n  }) as string;\n}\n\nexport { conversionUtil, decGWEIToHexWEI, hexWEIToDecGWEI };\n","import { SignTypedDataVersion, TYPED_MESSAGE_SCHEMA, TypedDataV1Field, typedSignatureHash } from \"@metamask/eth-sig-util\";\nimport { get } from \"@toruslabs/http-helpers\";\nimport { isHexStrict } from \"@web3auth/base\";\nimport assert from \"assert\";\nimport { BigNumber } from \"bignumber.js\";\nimport { ethErrors } from \"eth-rpc-errors\";\nimport { isValidAddress } from \"ethereumjs-util\";\nimport jsonschema from \"jsonschema\";\n\nimport { TypedMessageParams } from \"../../../rpc/interfaces\";\nimport { decGWEIToHexWEI, hexWEIToDecGWEI } from \"../../converter\";\nimport { EIP1159GasData, LegacyGasData } from \"./interfaces\";\n\nexport function normalizeGWEIDecimalNumbers(n: string | BigNumber): string {\n  const numberAsWEIHex = decGWEIToHexWEI(n);\n  const numberAsGWEI = hexWEIToDecGWEI(numberAsWEIHex);\n  return numberAsGWEI;\n}\n\nexport async function fetchEip1159GasEstimates(url: string): Promise<EIP1159GasData> {\n  const estimates = await get<EIP1159GasData>(url);\n  const normalizedEstimates = {\n    ...estimates,\n    estimatedBaseFee: normalizeGWEIDecimalNumbers(estimates.estimatedBaseFee),\n    low: {\n      ...estimates.low,\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxFeePerGas),\n    },\n    medium: {\n      ...estimates.medium,\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxFeePerGas),\n    },\n    high: {\n      ...estimates.high,\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxFeePerGas),\n    },\n  };\n  return normalizedEstimates;\n}\n\n/**\n * Hit the legacy MetaSwaps gasPrices estimate api and return the low, medium\n * high values from that API.\n */\nexport async function fetchLegacyGasPriceEstimates(url: string): Promise<LegacyGasData> {\n  const result = await get<{\n    SafeGasPrice: string;\n    ProposeGasPrice: string;\n    FastGasPrice: string;\n  }>(url, {\n    referrer: url,\n    referrerPolicy: \"no-referrer-when-downgrade\",\n    method: \"GET\",\n    mode: \"cors\",\n  });\n  return {\n    low: result.SafeGasPrice,\n    medium: result.ProposeGasPrice,\n    high: result.FastGasPrice,\n  };\n}\n\nexport const validateTypedMessageParams = (parameters: TypedMessageParams<unknown>, activeChainId: number) => {\n  try {\n    assert.ok(parameters && typeof parameters === \"object\", \"Params must be an object.\");\n    assert.ok(\"data\" in parameters, 'Params must include a \"data\" field.');\n    assert.ok(\"from\" in parameters, 'Params must include a \"from\" field.');\n    assert.ok(\n      typeof parameters.from === \"string\" && isValidAddress(parameters.from),\n      '\"from\" field must be a valid, lowercase, hexadecimal Ethereum address string.'\n    );\n    let data = null;\n    let chainId = null;\n    switch ((parameters as TypedMessageParams<unknown>).version) {\n      case SignTypedDataVersion.V1:\n        if (typeof parameters.data === \"string\") {\n          assert.doesNotThrow(() => {\n            data = JSON.parse(parameters.data as string);\n          }, '\"data\" must be a valid JSON string.');\n        } else {\n          // for backward compatiblity we validate for both string and object type.\n          data = parameters.data;\n        }\n        assert.ok(Array.isArray(data as unknown), \"params.data must be an array.\");\n        assert.doesNotThrow(() => {\n          typedSignatureHash(data as TypedDataV1Field[]);\n        }, \"Signing data must be valid EIP-712 typed data.\");\n        break;\n      case SignTypedDataVersion.V3:\n      case SignTypedDataVersion.V4:\n        if (typeof parameters.data === \"string\") {\n          assert.doesNotThrow(() => {\n            data = JSON.parse(parameters.data as string);\n          }, '\"data\" must be a valid JSON string.');\n        } else {\n          // for backward compatiblity we validate for both string and object type.\n          data = parameters.data;\n        }\n\n        assert.ok(data.primaryType in data.types, `Primary type of \"${data.primaryType}\" has no type definition.`);\n        const validation = jsonschema.validate(data, TYPED_MESSAGE_SCHEMA.properties);\n        assert.strictEqual(validation.errors.length, 0, \"Signing data must conform to EIP-712 schema. See https://git.io/fNtcx.\");\n        chainId = data.domain?.chainId;\n        if (chainId) {\n          assert.ok(!Number.isNaN(activeChainId), `Cannot sign messages for chainId \"${chainId}\", because Web3Auth is switching networks.`);\n          if (typeof chainId === \"string\") {\n            chainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n          }\n          assert.strictEqual(chainId, activeChainId, `Provided chainId \"${chainId}\" must match the active chainId \"${activeChainId}\"`);\n        }\n        break;\n      default:\n        assert.fail(`Unknown typed data version \"${(parameters as TypedMessageParams<unknown>).version}\"`);\n    }\n  } catch (error) {\n    throw ethErrors.rpc.invalidInput({\n      message: error?.message,\n    });\n  }\n};\n","import { TransactionFactory } from \"@ethereumjs/tx\";\nimport {\n  decrypt,\n  EthEncryptedData,\n  getEncryptionPublicKey,\n  MessageTypes,\n  personalSign,\n  signTypedData,\n  SignTypedDataVersion,\n  TypedDataV1,\n  TypedMessage,\n} from \"@metamask/eth-sig-util\";\nimport { SafeEventEmitterProvider, signMessage } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { isHexStrict, log } from \"@web3auth/base\";\nimport { ethErrors } from \"eth-rpc-errors\";\nimport { privateToAddress, stripHexPrefix } from \"ethereumjs-util\";\n\nimport { IProviderHandlers, MessageParams, TransactionParams, TypedMessageParams } from \"../../rpc/interfaces\";\nimport { TransactionFormatter } from \"./TransactionFormatter\";\nimport { validateTypedMessageParams } from \"./TransactionFormatter/utils\";\n\nasync function signTx(txParams: TransactionParams & { gas?: string }, privKey: string, txFormatter: TransactionFormatter): Promise<Buffer> {\n  const finalTxParams = await txFormatter.formatTransaction(txParams);\n  const common = await txFormatter.getCommonConfiguration();\n  const unsignedEthTx = TransactionFactory.fromTxData(finalTxParams, {\n    common,\n  });\n  const signedTx = unsignedEthTx.sign(Buffer.from(privKey, \"hex\")).serialize();\n  return signedTx;\n}\n\nexport function getProviderHandlers({\n  txFormatter,\n  privKey,\n  getProviderEngineProxy,\n}: {\n  txFormatter: TransactionFormatter;\n  privKey: string;\n  getProviderEngineProxy: () => SafeEventEmitterProvider | null;\n}): IProviderHandlers {\n  return {\n    getAccounts: async (_: JRPCRequest<unknown>) => [`0x${privateToAddress(Buffer.from(privKey, \"hex\")).toString(\"hex\")}`],\n    getPrivateKey: async (_: JRPCRequest<unknown>) => privKey,\n    processTransaction: async (txParams: TransactionParams & { gas?: string }, _: JRPCRequest<unknown>): Promise<string> => {\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw ethErrors.provider.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      const signedTx = await signTx(txParams, privKey, txFormatter);\n      const txHash = await providerEngineProxy.request<string[], string>({\n        method: \"eth_sendRawTransaction\",\n        params: [\"0x\".concat(signedTx.toString(\"hex\"))],\n      });\n      return txHash;\n    },\n    processSignTransaction: async (txParams: TransactionParams & { gas?: string }, _: JRPCRequest<unknown>): Promise<string> => {\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw ethErrors.provider.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      const signedTx = await signTx(txParams, privKey, txFormatter);\n      return `0x${signedTx.toString(\"hex\")}`;\n    },\n    processEthSignMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const rawMessageSig = signMessage(privKey, msgParams.data);\n      return rawMessageSig;\n    },\n    processPersonalMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const sig = personalSign({ privateKey: privKeyBuffer, data: msgParams.data });\n      return sig;\n    },\n    processTypedMessage: async (msgParams: MessageParams<TypedDataV1>, _: JRPCRequest<unknown>): Promise<string> => {\n      log.debug(\"processTypedMessage\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw ethErrors.provider.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      const chainId = await providerEngineProxy.request<unknown, string>({ method: \"eth_chainId\" });\n      const finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n      const params = {\n        ...msgParams,\n        version: SignTypedDataVersion.V1,\n      };\n      validateTypedMessageParams(params, finalChainId);\n      const data = typeof params.data === \"string\" ? JSON.parse(params.data) : params.data;\n      const sig = signTypedData({ privateKey: privKeyBuffer, data, version: SignTypedDataVersion.V1 });\n      return sig;\n    },\n    processTypedMessageV3: async (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>, _: JRPCRequest<unknown>): Promise<string> => {\n      log.debug(\"processTypedMessageV3\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw ethErrors.provider.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      const chainId = await providerEngineProxy.request<unknown, string>({ method: \"eth_chainId\" });\n      const finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n      validateTypedMessageParams(msgParams, finalChainId);\n      const data = typeof msgParams.data === \"string\" ? JSON.parse(msgParams.data) : msgParams.data;\n      const sig = signTypedData({ privateKey: privKeyBuffer, data, version: SignTypedDataVersion.V3 });\n      return sig;\n    },\n    processTypedMessageV4: async (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>, _: JRPCRequest<unknown>): Promise<string> => {\n      log.debug(\"processTypedMessageV4\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw ethErrors.provider.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      const chainId = await providerEngineProxy.request<unknown, string>({ method: \"eth_chainId\" });\n      const finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n      validateTypedMessageParams(msgParams, finalChainId);\n      const data = typeof msgParams.data === \"string\" ? JSON.parse(msgParams.data) : msgParams.data;\n      const sig = signTypedData({ privateKey: privKeyBuffer, data, version: SignTypedDataVersion.V4 });\n      return sig;\n    },\n    processEncryptionPublicKey: async (address: string, _: JRPCRequest<unknown>): Promise<string> => {\n      log.info(\"processEncryptionPublicKey\", address);\n      return getEncryptionPublicKey(privKey);\n    },\n    processDecryptMessage: (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): string => {\n      log.info(\"processDecryptMessage\", msgParams);\n      const stripped = stripHexPrefix(msgParams.data);\n      const buff = Buffer.from(stripped, \"hex\");\n      const decrypted = decrypt({ encryptedData: JSON.parse(buff.toString(\"utf8\")) as EthEncryptedData, privateKey: privKey });\n      return decrypted;\n    },\n  };\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@ethereumjs/common\");","import { BigNumber } from \"bignumber.js\";\nimport { addHexPrefix, BN, stripHexPrefix } from \"ethereumjs-util\";\n\nexport function bnLessThan(a, b) {\n  if (a === null || a === undefined || b === null || b === undefined) {\n    return null;\n  }\n  return new BigNumber(a, 10).lt(b, 10);\n}\n\nexport function bnToHex(inputBn: BN) {\n  return addHexPrefix(inputBn.toString(16));\n}\n\nexport function hexToBn(inputHex: string): BN {\n  if (BN.isBN(inputHex)) return inputHex;\n  return new BN(stripHexPrefix(inputHex), 16);\n}\n\nexport function BnMultiplyByFraction(targetBN: BN, numerator: number | string, denominator: number | string): BN {\n  const numberBN = new BN(numerator);\n  const denomBN = new BN(denominator);\n  return targetBN.mul(numberBN).div(denomBN);\n}\n","export const LegacyGasAPIEndpoint = \"https://gas-api.metaswap.codefi.network/networks/<chain_id>/gasPrices\";\nexport const EIP1559APIEndpoint = \"https://gas-api.metaswap.codefi.network/networks/<chain_id>/suggestedGasFees\";\nexport const TRANSACTION_ENVELOPE_TYPES = {\n  LEGACY: \"0x0\",\n  ACCESS_LIST: \"0x1\",\n  FEE_MARKET: \"0x2\",\n};\n\nexport const TRANSACTION_TYPES = {\n  SENT_ETHER: \"sentEther\",\n  CONTRACT_INTERACTION: \"contractInteraction\",\n  DEPLOY_CONTRACT: \"contractDeployment\",\n  STANDARD_TRANSACTION: \"transaction\",\n};\n\nexport const GAS_ESTIMATE_TYPES = {\n  FEE_MARKET: \"fee-market\",\n  LEGACY: \"legacy\",\n  ETH_GASPRICE: \"eth_gasPrice\",\n  NONE: \"none\",\n};\n","import Common, { Hardfork } from \"@ethereumjs/common\";\nimport { Block } from \"@toruslabs/base-controllers\";\nimport { CustomChainConfig, log, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { addHexPrefix, stripHexPrefix } from \"ethereumjs-util\";\n\nimport { TransactionParams } from \"../../../rpc/interfaces\";\nimport { decGWEIToHexWEI, hexWEIToDecGWEI } from \"../../converter\";\nimport { bnLessThan, BnMultiplyByFraction, bnToHex, hexToBn } from \"../../utils\";\nimport { EIP1559APIEndpoint, GAS_ESTIMATE_TYPES, LegacyGasAPIEndpoint, TRANSACTION_ENVELOPE_TYPES, TRANSACTION_TYPES } from \"./constants\";\nimport { EIP1159GasData, FallbackGasData, GasData, LegacyGasData, TxType } from \"./interfaces\";\nimport { fetchEip1159GasEstimates, fetchLegacyGasPriceEstimates } from \"./utils\";\n\nexport class TransactionFormatter {\n  private chainConfig: CustomChainConfig | null = null;\n\n  private getProviderEngineProxy: () => SafeEventEmitterProvider;\n\n  private isEIP1559Compatible = false;\n\n  constructor({ getProviderEngineProxy }: { getProviderEngineProxy: () => SafeEventEmitterProvider }) {\n    this.getProviderEngineProxy = getProviderEngineProxy;\n  }\n\n  get providerProxy() {\n    return this.getProviderEngineProxy();\n  }\n\n  async init(): Promise<void> {\n    this.chainConfig = (await this.providerProxy.request<CustomChainConfig>({ method: \"eth_provider_config\", params: [] })) as CustomChainConfig;\n    this.isEIP1559Compatible = await this.getEIP1559Compatibility();\n  }\n\n  async getCommonConfiguration(): Promise<Common> {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n    const { displayName: name, chainId } = this.chainConfig;\n    const hardfork = this.isEIP1559Compatible ? Hardfork.London : Hardfork.Berlin;\n    const customChainParams = {\n      name,\n      chainId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 16),\n      networkId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 16),\n      defaultHardfork: hardfork,\n    };\n    return Common.custom(customChainParams);\n  }\n\n  async formatTransaction(txParams: TransactionParams & { gas?: string }): Promise<TransactionParams & { gas?: string }> {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n\n    const clonedTxParams = {\n      ...txParams,\n    };\n\n    if (clonedTxParams.nonce === undefined)\n      clonedTxParams.nonce = (await this.providerProxy.request<number>({\n        method: \"eth_getTransactionCount\",\n        params: [txParams.from, \"latest\"],\n      })) as number;\n\n    if (!this.isEIP1559Compatible && clonedTxParams.gasPrice) {\n      if (clonedTxParams.maxFeePerGas) delete clonedTxParams.maxFeePerGas;\n      if (clonedTxParams.maxPriorityFeePerGas) delete clonedTxParams.maxPriorityFeePerGas;\n      // if gas is not provided explicitly, estimate it.\n      if (!clonedTxParams.gas) {\n        const defaultGasLimit = await this.getDefaultGasLimit(clonedTxParams);\n        if (defaultGasLimit) {\n          clonedTxParams.gasLimit = defaultGasLimit;\n        }\n      } else {\n        clonedTxParams.gasLimit = clonedTxParams.gas;\n      }\n      return clonedTxParams;\n    }\n\n    if (!clonedTxParams.gas) {\n      const defaultGasLimit = await this.getDefaultGasLimit(clonedTxParams);\n      if (defaultGasLimit) {\n        clonedTxParams.gasLimit = defaultGasLimit;\n      }\n    } else {\n      clonedTxParams.gasLimit = clonedTxParams.gas;\n    }\n\n    const {\n      gasPrice: defaultGasPrice,\n      maxFeePerGas: defaultMaxFeePerGas,\n      maxPriorityFeePerGas: defaultMaxPriorityFeePerGas,\n    } = await this.getDefaultGasFees(clonedTxParams);\n\n    if (this.isEIP1559Compatible) {\n      // If the dapp has suggested a gas price, but no maxFeePerGas or maxPriorityFeePerGas\n      //  then we set maxFeePerGas and maxPriorityFeePerGas to the suggested gasPrice.\n      if (clonedTxParams.gasPrice && !clonedTxParams.maxFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n        clonedTxParams.maxFeePerGas = clonedTxParams.gasPrice;\n\n        clonedTxParams.maxPriorityFeePerGas = bnLessThan(\n          typeof defaultMaxPriorityFeePerGas === \"string\" ? stripHexPrefix(defaultMaxPriorityFeePerGas) : defaultMaxPriorityFeePerGas,\n          typeof clonedTxParams.gasPrice === \"string\" ? stripHexPrefix(clonedTxParams.gasPrice) : clonedTxParams.gasPrice\n        )\n          ? defaultMaxPriorityFeePerGas\n          : clonedTxParams.gasPrice;\n      } else {\n        if (defaultMaxFeePerGas && !clonedTxParams.maxFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxFeePerGas, then we set maxFeePerGas\n          // with the one returned by the gasFeeController, if that is available.\n          clonedTxParams.maxFeePerGas = defaultMaxFeePerGas;\n        }\n\n        if (defaultMaxPriorityFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, then we set maxPriorityFeePerGas\n          // with the one returned by the gasFeeController, if that is available.\n          clonedTxParams.maxPriorityFeePerGas = defaultMaxPriorityFeePerGas;\n        }\n\n        if (defaultGasPrice && !clonedTxParams.maxFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxFeePerGas, and no maxFeePerGas is available\n          // then we set maxFeePerGas to the defaultGasPrice, assuming it is\n          // available.\n          clonedTxParams.maxFeePerGas = defaultGasPrice;\n        }\n\n        if (clonedTxParams.maxFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, and no maxPriorityFeePerGas is\n          // available  then we set maxPriorityFeePerGas to\n          // clonedTxParams.maxFeePerGas, which will either be the gasPrice from the controller, the maxFeePerGas\n          // set by the dapp, or the maxFeePerGas from the controller.\n          clonedTxParams.maxPriorityFeePerGas = clonedTxParams.maxFeePerGas;\n        }\n      }\n\n      // We remove the gasPrice param entirely when on an eip1559 compatible network\n\n      delete clonedTxParams.gasPrice;\n    } else {\n      // We ensure that maxFeePerGas and maxPriorityFeePerGas are not in the transaction params\n      // when not on a EIP1559 compatible network\n\n      delete clonedTxParams.maxPriorityFeePerGas;\n      delete clonedTxParams.maxFeePerGas;\n    }\n\n    // If we have gotten to this point, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas are\n    // set on txParams, it means that either we are on a non-EIP1559 network and the dapp didn't suggest\n    // a gas price, or we are on an EIP1559 network, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas\n    // were available from either the dapp or the network.\n    if (defaultGasPrice && !clonedTxParams.gasPrice && !clonedTxParams.maxPriorityFeePerGas && !clonedTxParams.maxFeePerGas) {\n      clonedTxParams.gasPrice = defaultGasPrice as never;\n    }\n\n    clonedTxParams.type = this.isEIP1559Compatible ? TRANSACTION_ENVELOPE_TYPES.FEE_MARKET : TRANSACTION_ENVELOPE_TYPES.LEGACY;\n    clonedTxParams.chainId = this.chainConfig.chainId;\n    return clonedTxParams;\n  }\n\n  private async fetchEthGasPriceEstimate(): Promise<{ gasPrice: string }> {\n    const gasPrice = (await this.providerProxy.request<string>({ method: \"eth_gasPrice\", params: [] })) as string;\n    return {\n      gasPrice: hexWEIToDecGWEI(gasPrice).toString(),\n    };\n  }\n\n  private async getEIP1559Compatibility(): Promise<boolean> {\n    const latestBlock = await this.providerProxy.request<Block>({ method: \"eth_getBlockByNumber\", params: [\"latest\", false] });\n    const supportsEIP1559 = latestBlock && latestBlock.baseFeePerGas !== undefined;\n\n    return !!supportsEIP1559;\n  }\n\n  private async fetchGasFeeEstimateData(): Promise<GasData> {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n    const isLegacyGasAPICompatible = this.chainConfig.chainId === \"0x1\";\n\n    const chainId = Number.parseInt(this.chainConfig.chainId, 16);\n\n    let gasData: GasData;\n\n    try {\n      if (this.isEIP1559Compatible) {\n        // TODO: kovan is not working due to a bug in metamask api\n        const estimates = await fetchEip1159GasEstimates(EIP1559APIEndpoint.replace(\"<chain_id>\", `${chainId}`));\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.FEE_MARKET,\n        };\n      } else if (isLegacyGasAPICompatible) {\n        const estimates = await fetchLegacyGasPriceEstimates(LegacyGasAPIEndpoint.replace(\"<chain_id>\", `${chainId}`));\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.LEGACY,\n        };\n      } else {\n        throw new Error(\"Main gas fee/price estimation failed. Use fallback\");\n      }\n    } catch (e: unknown) {\n      try {\n        const estimates = await this.fetchEthGasPriceEstimate();\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.ETH_GASPRICE,\n        };\n      } catch (error: unknown) {\n        throw new Error(`Gas fee/price estimation failed. Message: ${(error as Error).message}`);\n      }\n    }\n    return gasData;\n  }\n\n  private async getDefaultGasFees(\n    txParams: TransactionParams & { gas?: string }\n  ): Promise<{ gasPrice?: string; maxFeePerGas?: string; maxPriorityFeePerGas?: string }> {\n    if ((!this.isEIP1559Compatible && txParams.gasPrice) || (this.isEIP1559Compatible && txParams.maxFeePerGas && txParams.maxPriorityFeePerGas)) {\n      return {};\n    }\n\n    try {\n      const { gasFeeEstimates, gasEstimateType } = await this.fetchGasFeeEstimateData();\n      if (this.isEIP1559Compatible && gasEstimateType === GAS_ESTIMATE_TYPES.FEE_MARKET) {\n        const { medium: { suggestedMaxPriorityFeePerGas, suggestedMaxFeePerGas } = {} } = gasFeeEstimates as EIP1159GasData;\n\n        if (suggestedMaxPriorityFeePerGas && suggestedMaxFeePerGas) {\n          return {\n            maxFeePerGas: addHexPrefix(decGWEIToHexWEI(suggestedMaxFeePerGas)),\n            maxPriorityFeePerGas: addHexPrefix(decGWEIToHexWEI(suggestedMaxPriorityFeePerGas)),\n          };\n        }\n      } else if (gasEstimateType === GAS_ESTIMATE_TYPES.LEGACY) {\n        // The LEGACY type includes low, medium and high estimates of\n        // gas price values.\n        return {\n          gasPrice: addHexPrefix(decGWEIToHexWEI((gasFeeEstimates as LegacyGasData).medium)),\n        };\n      } else if (gasEstimateType === GAS_ESTIMATE_TYPES.ETH_GASPRICE) {\n        // The ETH_GASPRICE type just includes a single gas price property,\n        // which we can assume was retrieved from eth_gasPrice\n        return {\n          gasPrice: addHexPrefix(decGWEIToHexWEI((gasFeeEstimates as FallbackGasData).gasPrice)),\n        };\n      }\n    } catch (error) {\n      log.error(error);\n    }\n\n    const { gasPrice } = await this.fetchEthGasPriceEstimate();\n\n    return { gasPrice: addHexPrefix(decGWEIToHexWEI(gasPrice)) };\n  }\n\n  private async estimateTxGas(txMeta: TransactionParams): Promise<string> {\n    const txParams = { ...txMeta };\n\n    // `eth_estimateGas` can fail if the user has insufficient balance for the\n    // value being sent, or for the gas cost. We don't want to check their\n    // balance here, we just want the gas estimate. The gas price is removed\n    // to skip those balance checks. We check balance elsewhere. We also delete\n    // maxFeePerGas and maxPriorityFeePerGas to support EIP-1559 txs.\n    delete txParams.gasPrice;\n    delete txParams.maxFeePerGas;\n    delete txParams.maxPriorityFeePerGas;\n    const gas = (await this.providerProxy.request<string>({ method: \"eth_estimateGas\", params: [txParams] })) as string;\n    return gas;\n  }\n\n  private async analyzeGasUsage(txMeta: TransactionParams): Promise<{\n    blockGasLimit: string;\n    estimatedGasHex: string;\n  }> {\n    const block = (await this.providerProxy.request<Block>({ method: \"eth_getBlockByNumber\", params: [\"latest\", false] })) as Block;\n    // fallback to block gasLimit\n    const blockGasLimitBN = hexToBn(block.gasLimit as string);\n    const saferGasLimitBN = BnMultiplyByFraction(blockGasLimitBN, 19, 20);\n    let estimatedGasHex = bnToHex(saferGasLimitBN);\n\n    try {\n      estimatedGasHex = await this.estimateTxGas(txMeta);\n    } catch (error: unknown) {\n      log.warn(error);\n    }\n    return { blockGasLimit: block.gasLimit as string, estimatedGasHex };\n  }\n\n  private addGasBuffer(initialGasLimitHex: string, blockGasLimitHex: string, multiplier = 1.5): string {\n    const initialGasLimitBn = hexToBn(initialGasLimitHex);\n    const blockGasLimitBn = hexToBn(blockGasLimitHex);\n    const upperGasLimitBn = blockGasLimitBn.muln(0.9);\n    const bufferedGasLimitBn = initialGasLimitBn.muln(multiplier);\n\n    // if initialGasLimit is above blockGasLimit, dont modify it\n    if (initialGasLimitBn.gt(upperGasLimitBn)) return bnToHex(initialGasLimitBn);\n    // if bufferedGasLimit is below blockGasLimit, use bufferedGasLimit\n    if (bufferedGasLimitBn.lt(upperGasLimitBn)) return bnToHex(bufferedGasLimitBn);\n    // otherwise use blockGasLimit\n    return bnToHex(upperGasLimitBn);\n  }\n\n  private async determineTransactionCategory(txParameters: TransactionParams & { gas?: string }): Promise<{\n    transactionCategory: TxType | null;\n    code?: string;\n  }> {\n    const { data, to } = txParameters;\n    let code = \"\";\n\n    let txCategory: TxType | null;\n\n    if (data && !to) {\n      txCategory = TRANSACTION_TYPES.DEPLOY_CONTRACT;\n    } else {\n      try {\n        code = (await this.providerProxy.request<string>({ method: \"eth_getCode\", params: [to, \"latest\"] })) as string;\n      } catch (error) {\n        log.warn(error);\n      }\n      const codeIsEmpty = !code || code === \"0x\" || code === \"0x0\";\n\n      txCategory = codeIsEmpty ? TRANSACTION_TYPES.SENT_ETHER : TRANSACTION_TYPES.CONTRACT_INTERACTION;\n    }\n\n    return { transactionCategory: txCategory, code };\n  }\n\n  private async getDefaultGasLimit(txParams: TransactionParams & { gas?: string }): Promise<string> {\n    const { transactionCategory } = await this.determineTransactionCategory({ ...txParams });\n\n    if (txParams.gas) {\n      return txParams.gas;\n    }\n\n    if (txParams.to && transactionCategory === TRANSACTION_TYPES.SENT_ETHER) {\n      // if there's data in the params, but there's no contract code, it's not a valid transaction\n      if (txParams.data) {\n        throw Error(\"TxGasUtil - Trying to call a function on a non-contract address\");\n      }\n\n      const TWENTY_ONE_THOUSAND = 21_000;\n\n      // This is a standard ether simple send, gas requirement is exactly 21k\n      return addHexPrefix(TWENTY_ONE_THOUSAND.toString(16));\n    }\n\n    const { blockGasLimit, estimatedGasHex } = await this.analyzeGasUsage(txParams);\n\n    // add additional gas buffer to our estimation for safety\n    const gasLimit = this.addGasBuffer(addHexPrefix(estimatedGasHex), blockGasLimit as string);\n    return gasLimit;\n  }\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { createAccountMiddleware, createChainSwitchMiddleware, createEthMiddleware } from \"../../rpc/ethRpcMiddlewares\";\nimport { AddEthereumChainParameter, IAccountHandlers, IChainSwitchHandlers } from \"../../rpc/interfaces\";\nimport { createJsonRpcClient } from \"../../rpc/jrpcClient\";\nimport { getProviderHandlers } from \"./ethPrivatekeyUtils\";\nimport { TransactionFormatter } from \"./TransactionFormatter\";\n\nexport interface EthereumPrivKeyProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\n\nexport interface EthereumPrivKeyProviderState extends BaseProviderState {\n  privateKey?: string;\n}\nexport class EthereumPrivateKeyProvider extends BaseProvider<BaseProviderConfig, EthereumPrivKeyProviderState, string> {\n  constructor({ config, state }: { config: EthereumPrivKeyProviderConfig; state?: EthereumPrivKeyProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.EIP155 } }, state });\n  }\n\n  public static getProviderInstance = async (params: {\n    privKey: string;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n  }): Promise<EthereumPrivateKeyProvider> => {\n    const providerFactory = new EthereumPrivateKeyProvider({ config: { chainConfig: params.chainConfig } });\n    await providerFactory.setupProvider(params.privKey);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.state.privateKey)\n      throw ethErrors.provider.custom({ message: \"Private key is not found in state, plz pass it in constructor state param\", code: 4902 });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request({ method: \"eth_accounts\" });\n  }\n\n  public async setupProvider(privKey: string): Promise<void> {\n    const txFormatter = new TransactionFormatter({\n      getProviderEngineProxy: this.getProviderEngineProxy.bind(this),\n    });\n    const providerHandlers = getProviderHandlers({\n      txFormatter,\n      privKey,\n      getProviderEngineProxy: this.getProviderEngineProxy.bind(this),\n    });\n    const ethMiddleware = createEthMiddleware(providerHandlers);\n    const chainSwitchMiddleware = this.getChainSwitchMiddleware();\n    const engine = new JRPCEngine();\n    // Not a partial anymore because of checks in ctor\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(ethMiddleware);\n    engine.push(chainSwitchMiddleware);\n    engine.push(this.getAccountMiddleware());\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await txFormatter.init();\n    await this.lookupNetwork();\n  }\n\n  public async updateAccount(params: { privateKey: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const existingKey = await this._providerEngineProxy.request<unknown, string>({ method: \"eth_private_key\" });\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n      this._providerEngineProxy.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request<unknown, string[]>({ method: \"eth_accounts\" }),\n      });\n    }\n  }\n\n  public async switchChain(params: { chainId: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\",\n    });\n    this.configure({ chainConfig });\n    const privKey = await this._providerEngineProxy.request<unknown, string>({ method: \"eth_private_key\" });\n    await this.setupProvider(privKey);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const { chainId } = this.config.chainConfig;\n    if (!chainId) throw ethErrors.rpc.invalidParams(\"chainId is required while lookupNetwork\");\n    const network = await this._providerEngineProxy.request<string[], string>({\n      method: \"net_version\",\n      params: [],\n    });\n\n    if (parseInt(chainId, 16) !== parseInt(network, 10)) throw ethErrors.provider.chainDisconnected(`Invalid network, net_version is: ${network}`);\n    if (this.state.chainId !== chainId) {\n      this._providerEngineProxy.emit(\"chainChanged\", chainId);\n      this._providerEngineProxy.emit(\"connect\", { chainId });\n    }\n    this.update({ chainId });\n    return network;\n  }\n\n  private getChainSwitchMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const chainSwitchHandlers: IChainSwitchHandlers = {\n      addChain: async (params: AddEthereumChainParameter): Promise<void> => {\n        const { chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency } = params;\n        this.addChain({\n          chainNamespace: \"eip155\",\n          chainId,\n          ticker: nativeCurrency?.symbol || \"ETH\",\n          tickerName: nativeCurrency?.name || \"Ether\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: blockExplorerUrls?.[0] || \"\",\n        });\n      },\n      switchChain: async (params: { chainId: string }): Promise<void> => {\n        const { chainId } = params;\n        await this.switchChain({ chainId });\n      },\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  private getAccountMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const accountHandlers: IAccountHandlers = {\n      updatePrivatekey: async (params: { privateKey: string }): Promise<void> => {\n        const { privateKey } = params;\n        await this.updateAccount({ privateKey });\n      },\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n}\n","export * from \"./EthereumPrivateKeyProvider\";\nexport * from \"./ethPrivatekeyUtils\";\nexport * from \"./TransactionFormatter\";\n","export * from \"./injectedProviders\";\nexport * from \"./privateKeyProviders\";\n","export * from \"./providers\";\n"],"names":["createAsyncMiddleware","createScaffoldMiddleware","ethErrors","resemblesAddress","str","length","createWalletMiddleware","getAccounts","getPrivateKey","processDecryptMessage","processEncryptionPublicKey","processEthSignMessage","processPersonalMessage","processTransaction","processSignTransaction","processTypedMessage","processTypedMessageV3","processTypedMessageV4","Error","validateAndNormalizeKeyholder","address","req","accounts","normalizedAccounts","map","_address","toLowerCase","normalizedAddress","includes","rpc","invalidParams","message","lookupAccounts","res","result","lookupDefaultAccount","sendTransaction","methodNotSupported","txParams","params","from","signTransaction","ethSign","extraParams","msgParams","data","signTypedData","version","signTypedDataV3","signTypedDataV4","personalSign","firstParam","secondParam","warning","encryptionPublicKey","decryptMessage","ciphertext","fetchPrivateKey","eth_accounts","eth_private_key","eth_coinbase","eth_sendTransaction","eth_signTransaction","eth_sign","eth_signTypedData","eth_signTypedData_v3","eth_signTypedData_v4","personal_sign","eth_getEncryptionPublicKey","eth_decrypt","mergeMiddleware","createEthMiddleware","providerHandlers","ethMiddleware","eth_syncing","createChainSwitchMiddleware","addChain","switchChain","addNewChain","chainParams","undefined","chainId","rpcUrls","nativeCurrency","updateChain","wallet_addEthereumChain","wallet_switchEthereumChain","createAccountMiddleware","updatePrivatekey","updateAccount","accountParams","privateKey","wallet_updateAccount","createFetchMiddleware","createChainIdMiddleware","next","end","method","createProviderConfigMiddleware","providerConfig","createJsonRpcClient","rpcTarget","fetchMiddleware","networkMiddleware","getProviderHandlers","connector","_","signMessage","signPersonalMessage","providerFromEngine","JRPCEngine","CHAIN_NAMESPACES","getChainConfig","isHexStrict","log","WalletInitializationError","WalletLoginError","BaseProvider","WalletConnectProvider","constructor","config","state","chainConfig","chainNamespace","EIP155","skipLookupNetwork","enable","provider","custom","code","setupProvider","_providerEngineProxy","request","onConnectorStateUpdate","setupEngine","lookup","currentChainConfig","update","displayName","sendCustomRequest","chainName","error","configure","lookupNetwork","notReady","connected","notConnectedError","connectedHexChainId","toString","rpcConnectionError","emit","engine","push","updateProviderEngineProxy","on","payload","connectedChainId","rpcUrl","maybeConfig","providerFactory","BigNumber","stripHexPrefix","BIG_NUMBER_WEI_MULTIPLIER","BIG_NUMBER_GWEI_MULTIPLIER","BIG_NUMBER_ETH_MULTIPLIER","toBigNumber","hex","n","dec","toNormalizedDenomination","WEI","bigNumber","div","GWEI","ETH","toSpecifiedDenomination","times","dp","ROUND_HALF_UP","baseChange","converter","value","fromNumericBase","fromDenomination","toNumericBase","toDenomination","numberOfDecimals","convertedValue","ROUND_HALF_DOWN","conversionUtil","decGWEIToHexWEI","decGWEI","hexWEIToDecGWEI","SignTypedDataVersion","TYPED_MESSAGE_SCHEMA","typedSignatureHash","get","assert","isValidAddress","jsonschema","normalizeGWEIDecimalNumbers","numberAsWEIHex","numberAsGWEI","fetchEip1159GasEstimates","url","estimates","normalizedEstimates","estimatedBaseFee","low","suggestedMaxPriorityFeePerGas","suggestedMaxFeePerGas","medium","high","fetchLegacyGasPriceEstimates","referrer","referrerPolicy","mode","SafeGasPrice","ProposeGasPrice","FastGasPrice","validateTypedMessageParams","parameters","activeChainId","ok","V1","doesNotThrow","JSON","parse","Array","isArray","V3","V4","primaryType","types","validation","validate","properties","strictEqual","errors","domain","Number","isNaN","parseInt","fail","invalidInput","TransactionFactory","decrypt","getEncryptionPublicKey","privateToAddress","signTx","privKey","txFormatter","finalTxParams","formatTransaction","common","getCommonConfiguration","unsignedEthTx","fromTxData","signedTx","sign","Buffer","serialize","getProviderEngineProxy","providerEngineProxy","txHash","concat","rawMessageSig","privKeyBuffer","sig","debug","finalChainId","info","stripped","buff","decrypted","encryptedData","addHexPrefix","BN","bnLessThan","a","b","lt","bnToHex","inputBn","hexToBn","inputHex","isBN","BnMultiplyByFraction","targetBN","numerator","denominator","numberBN","denomBN","mul","LegacyGasAPIEndpoint","EIP1559APIEndpoint","TRANSACTION_ENVELOPE_TYPES","LEGACY","ACCESS_LIST","FEE_MARKET","TRANSACTION_TYPES","SENT_ETHER","CONTRACT_INTERACTION","DEPLOY_CONTRACT","STANDARD_TRANSACTION","GAS_ESTIMATE_TYPES","ETH_GASPRICE","NONE","Common","Hardfork","TransactionFormatter","providerProxy","init","isEIP1559Compatible","getEIP1559Compatibility","name","hardfork","London","Berlin","customChainParams","networkId","defaultHardfork","clonedTxParams","nonce","gasPrice","maxFeePerGas","maxPriorityFeePerGas","gas","defaultGasLimit","getDefaultGasLimit","gasLimit","defaultGasPrice","defaultMaxFeePerGas","defaultMaxPriorityFeePerGas","getDefaultGasFees","type","fetchEthGasPriceEstimate","latestBlock","supportsEIP1559","baseFeePerGas","fetchGasFeeEstimateData","isLegacyGasAPICompatible","gasData","replace","gasFeeEstimates","gasEstimateType","e","estimateTxGas","txMeta","analyzeGasUsage","block","blockGasLimitBN","saferGasLimitBN","estimatedGasHex","warn","blockGasLimit","addGasBuffer","initialGasLimitHex","blockGasLimitHex","multiplier","initialGasLimitBn","blockGasLimitBn","upperGasLimitBn","muln","bufferedGasLimitBn","gt","determineTransactionCategory","txParameters","to","txCategory","codeIsEmpty","transactionCategory","TWENTY_ONE_THOUSAND","EthereumPrivateKeyProvider","bind","chainSwitchMiddleware","getChainSwitchMiddleware","getAccountMiddleware","existingKey","network","chainDisconnected","chainSwitchHandlers","blockExplorerUrls","ticker","symbol","tickerName","blockExplorer","accountHandlers"],"sourceRoot":""}