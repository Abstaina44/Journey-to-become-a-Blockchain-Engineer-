{"version":3,"file":"baseEvmAdapter.cjs.js","mappings":"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","sources":["webpack://@web3auth/base-evm-adapter/webpack/bootstrap","webpack://@web3auth/base-evm-adapter/webpack/runtime/define property getters","webpack://@web3auth/base-evm-adapter/webpack/runtime/hasOwnProperty shorthand","webpack://@web3auth/base-evm-adapter/webpack/runtime/make namespace object","webpack://@web3auth/base-evm-adapter/external commonjs2 \"@web3auth/base\"","webpack://@web3auth/base-evm-adapter/./src/baseEvmAdapter.ts","webpack://@web3auth/base-evm-adapter/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/base\");","import {\n  ADAPTER_STATUS,\n  BaseAdapter,\n  checkIfTokenIsExpired,\n  clearToken,\n  getSavedToken,\n  saveToken,\n  signChallenge,\n  UserAuthInfo,\n  verifySignedChallenge,\n  WalletLoginError,\n} from \"@web3auth/base\";\n\nexport abstract class BaseEvmAdapter<T> extends BaseAdapter<T> {\n  async authenticateUser(): Promise<UserAuthInfo> {\n    if (!this.provider || !this.chainConfig?.chainId) throw WalletLoginError.notConnectedError();\n\n    const { chainNamespace, chainId } = this.chainConfig;\n\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    const accounts = await this.provider.request<string[]>({\n      method: \"eth_accounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      const existingToken = getSavedToken(accounts[0] as string, this.name);\n      if (existingToken) {\n        const isExpired = checkIfTokenIsExpired(existingToken);\n        if (!isExpired) {\n          return { idToken: existingToken };\n        }\n      }\n\n      const payload = {\n        domain: window.location.origin,\n        uri: window.location.href,\n        address: accounts[0],\n        chainId: parseInt(chainId, 16),\n        version: \"1\",\n        nonce: Math.random().toString(36).slice(2),\n        issuedAt: new Date().toISOString(),\n      };\n\n      const challenge = await signChallenge(payload, chainNamespace);\n\n      const signedMessage = await this.provider.request<string>({\n        method: \"personal_sign\",\n        params: [challenge, accounts[0]],\n      });\n\n      const idToken = await verifySignedChallenge(chainNamespace, signedMessage as string, challenge, this.name, this.sessionTime);\n      saveToken(accounts[0] as string, this.name, idToken);\n      return {\n        idToken,\n      };\n    }\n    throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n  }\n\n  async disconnect(): Promise<void> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n    const accounts = await this.provider.request<string[]>({\n      method: \"eth_accounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      clearToken(accounts[0], this.name);\n    }\n  }\n}\n","export * from \"./baseEvmAdapter\";\n"],"names":["ADAPTER_STATUS","BaseAdapter","checkIfTokenIsExpired","clearToken","getSavedToken","saveToken","signChallenge","verifySignedChallenge","WalletLoginError","BaseEvmAdapter","authenticateUser","provider","chainConfig","chainId","notConnectedError","chainNamespace","status","CONNECTED","accounts","request","method","length","existingToken","name","isExpired","idToken","payload","domain","window","location","origin","uri","href","address","parseInt","version","nonce","Math","random","toString","slice","issuedAt","Date","toISOString","challenge","signedMessage","params","sessionTime","disconnect","disconnectionError"],"sourceRoot":""}