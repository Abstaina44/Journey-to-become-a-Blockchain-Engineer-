const ethers = require("ethers")
const fs = require("fs-extra")
require("dotenv").config()

async function main() {
    const provider = new ethers.providers.JsonRpcProvider(process.env.RPC_URL)
    let options = {
        gasPrice: "80000",
        gasLimit: "4612388",
        chainId: 4,
    }

    // const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);
    const encryptedJson = fs.readFileSync("./.encryptedKey.json", "utf8")
    let wallet = new ethers.Wallet.fromEncryptedJsonSync(
        encryptedJson,
        process.env.PRIVATE_KEY_PASSWORD
    )
    wallet = await wallet.connect(provider)

    const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf8")
    const binary = fs.readFileSync(
        "./SimpleStorage_sol_SimpleStorage.bin",
        "utf8"
    )

    const contractFactory = new ethers.ContractFactory(abi, binary, wallet)
    console.log("Deploying, please wait.....")

    const contract = await contractFactory.deploy(options)
    await contract.deployTransaction.wait(1)
    console.log(`Contract Address: ${contract.address}`)
    // console.log("Here is the deployment transaction: ");
    // console.log(contract.deployTransaction);
    // console.log("Here is the transaction receipt: ");
    // console.log(transactionReceipt);

    // console.log("Let's deploy with only transaction data!");
    // const nonce = await wallet.getTransactionCount();
    // const tx = {
    //   nonce: nonce,
    //   gasPrice: 20000000000,
    //   gasLimit: 1000000,
    //   to: null,
    //   value: 0,
    //   data: "0x608060405234801561001057600080fd5b50610770806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632e64cec11461005c5780636057361d1461007a57806390c3ee4d1461009657806398013323146100c65780639ff4446f146100f7575b600080fd5b610064610113565b604051610071919061035c565b60405180910390f35b610094600480360381019061008f91906103b7565b61011c565b005b6100b060048036038101906100ab919061052a565b610126565b6040516100bd919061035c565b60405180910390f35b6100e060048036038101906100db91906103b7565b610154565b6040516100ee9291906105fb565b60405180910390f35b610111600480360381019061010c919061062b565b610210565b005b60008054905090565b8060008190555050565b6002818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6001818154811061016457600080fd5b906000526020600020906002020160009150905080600001549080600101805461018d906106b6565b80601f01602080910402602001604051908101604052809291908181526020018280546101b9906106b6565b80156102065780601f106101db57610100808354040283529160200191610206565b820191906000526020600020905b8154815290600101906020018083116101e957829003601f168201915b5050505050905082565b600160405180604001604052808381526020018481525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010190805190602001906102769291906102a0565b5050508060028360405161028a9190610723565b9081526020016040518091039020819055505050565b8280546102ac906106b6565b90600052602060002090601f0160209004810192826102ce5760008555610315565b82601f106102e757805160ff1916838001178555610315565b82800160010185558215610315579182015b828111156103145782518255916020019190600101906102f9565b5b5090506103229190610326565b5090565b5b8082111561033f576000816000905550600101610327565b5090565b6000819050919050565b61035681610343565b82525050565b6000602082019050610371600083018461034d565b92915050565b6000604051905090565b600080fd5b600080fd5b61039481610343565b811461039f57600080fd5b50565b6000813590506103b18161038b565b92915050565b6000602082840312156103cd576103cc610381565b5b60006103db848285016103a2565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610437826103ee565b810181811067ffffffffffffffff82111715610456576104556103ff565b5b80604052505050565b6000610469610377565b9050610475828261042e565b919050565b600067ffffffffffffffff821115610495576104946103ff565b5b61049e826103ee565b9050602081019050919050565b82818337600083830152505050565b60006104cd6104c88461047a565b61045f565b9050828152602081018484840111156104e9576104e86103e9565b5b6104f48482856104ab565b509392505050565b600082601f830112610511576105106103e4565b5b81356105218482602086016104ba565b91505092915050565b6000602082840312156105405761053f610381565b5b600082013567ffffffffffffffff81111561055e5761055d610386565b5b61056a848285016104fc565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156105ad578082015181840152602081019050610592565b838111156105bc576000848401525b50505050565b60006105cd82610573565b6105d7818561057e565b93506105e781856020860161058f565b6105f0816103ee565b840191505092915050565b6000604082019050610610600083018561034d565b818103602083015261062281846105c2565b90509392505050565b6000806040838503121561064257610641610381565b5b600083013567ffffffffffffffff8111156106605761065f610386565b5b61066c858286016104fc565b925050602061067d858286016103a2565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806106ce57607f821691505b6020821081036106e1576106e0610687565b5b50919050565b600081905092915050565b60006106fd82610573565b61070781856106e7565b935061071781856020860161058f565b80840191505092915050565b600061072f82846106f2565b91508190509291505056fea26469706673582212209ec755c6cc518bd9d5be04c4547398a2caff8fed7762eb30f64ec53d5e141ca364736f6c634300080e0033",
    //   chainId: 1337,
    // };

    // const sendTxResponse = await wallet.sendTransaction(tx);
    // await sendTxResponse.wait(1);
    // console.log(sendTxResponse);

    const age = await contract.retrieve()
    console.log(`Current age is ${age.toString()}`)
    const txResponse = await contract.store("7")
    const txReceipt = await txResponse.wait(1)
    const updatedAge = await contract.retrieve()
    console.log(`Updated age is ${updatedAge}`)
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error(error)
        process.exit(1)
    })
